// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module blockmatmul_Loop_1_proc1_Pipeline_ps_i (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln23,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0,
        AB_address1,
        AB_ce1,
        AB_q1,
        tempB_a,
        tempB_a_1,
        tmp_13,
        tmp_14,
        tmp_15,
        tmp_16,
        tmp_17,
        tmp_18,
        tmp_19,
        tmp_20,
        tmp_21,
        tmp_22,
        tmp_23,
        tmp_24,
        trunc_ln145_2,
        trunc_ln145_3,
        A_address0,
        A_ce0,
        A_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] zext_ln23;
output  [3:0] AB_address0;
output   AB_ce0;
output  [63:0] AB_we0;
output  [511:0] AB_d0;
output  [3:0] AB_address1;
output   AB_ce1;
input  [511:0] AB_q1;
input  [31:0] tempB_a;
input  [31:0] tempB_a_1;
input  [31:0] tmp_13;
input  [31:0] tmp_14;
input  [31:0] tmp_15;
input  [31:0] tmp_16;
input  [31:0] tmp_17;
input  [31:0] tmp_18;
input  [31:0] tmp_19;
input  [31:0] tmp_20;
input  [31:0] tmp_21;
input  [31:0] tmp_22;
input  [31:0] tmp_23;
input  [31:0] tmp_24;
input  [31:0] trunc_ln145_2;
input  [31:0] trunc_ln145_3;
output  [9:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;

reg ap_idle;
reg AB_ce0;
reg[63:0] AB_we0;
reg AB_ce1;
reg A_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln26_fu_285_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] AB_addr_reg_735;
reg   [3:0] AB_addr_reg_735_pp0_iter1_reg;
reg   [3:0] AB_addr_reg_735_pp0_iter2_reg;
reg   [3:0] AB_addr_reg_735_pp0_iter3_reg;
reg  signed [31:0] A_load_reg_741;
wire   [31:0] trunc_ln28_fu_384_p1;
reg   [31:0] trunc_ln28_reg_761;
wire   [31:0] grp_fu_320_p2;
reg   [31:0] mul_ln28_reg_766;
reg   [31:0] tmp_s_reg_771;
wire   [31:0] grp_fu_324_p2;
reg   [31:0] mul_ln28_1_reg_776;
reg   [31:0] tmp_1_reg_781;
wire   [31:0] grp_fu_328_p2;
reg   [31:0] mul_ln28_2_reg_786;
reg   [31:0] tmp_2_reg_791;
wire   [31:0] grp_fu_332_p2;
reg   [31:0] mul_ln28_3_reg_796;
reg   [31:0] tmp_3_reg_801;
wire   [31:0] grp_fu_336_p2;
reg   [31:0] mul_ln28_4_reg_806;
reg   [31:0] tmp_4_reg_811;
wire   [31:0] grp_fu_340_p2;
reg   [31:0] mul_ln28_5_reg_816;
reg   [31:0] tmp_5_reg_821;
wire   [31:0] grp_fu_344_p2;
reg   [31:0] mul_ln28_6_reg_826;
reg   [31:0] tmp_6_reg_831;
wire   [31:0] grp_fu_348_p2;
reg   [31:0] mul_ln28_7_reg_836;
reg   [31:0] tmp_7_reg_841;
wire   [31:0] grp_fu_352_p2;
reg   [31:0] mul_ln28_8_reg_846;
reg   [31:0] tmp_8_reg_851;
wire   [31:0] grp_fu_356_p2;
reg   [31:0] mul_ln28_9_reg_856;
reg   [31:0] tmp_9_reg_861;
wire   [31:0] grp_fu_360_p2;
reg   [31:0] mul_ln28_10_reg_866;
reg   [31:0] tmp_10_reg_871;
wire   [31:0] grp_fu_364_p2;
reg   [31:0] mul_ln28_11_reg_876;
reg   [31:0] tmp_11_reg_881;
wire   [31:0] grp_fu_368_p2;
reg   [31:0] mul_ln28_12_reg_886;
reg   [31:0] tmp_12_reg_891;
wire   [31:0] grp_fu_372_p2;
reg   [31:0] mul_ln28_13_reg_896;
reg   [31:0] tmp_25_reg_901;
wire   [31:0] grp_fu_376_p2;
reg   [31:0] mul_ln28_14_reg_906;
reg   [31:0] tmp_26_reg_911;
wire   [31:0] grp_fu_380_p2;
reg   [31:0] mul_ln28_15_reg_916;
wire   [63:0] p_cast_fu_310_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln26_fu_297_p1;
reg   [4:0] i_1_fu_138;
wire   [4:0] add_ln26_fu_291_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i;
wire   [3:0] trunc_ln26_fu_281_p1;
wire   [9:0] tmp_fu_302_p3;
wire   [31:0] add_ln28_15_fu_598_p2;
wire   [31:0] add_ln28_14_fu_594_p2;
wire   [31:0] add_ln28_13_fu_590_p2;
wire   [31:0] add_ln28_12_fu_586_p2;
wire   [31:0] add_ln28_11_fu_582_p2;
wire   [31:0] add_ln28_10_fu_578_p2;
wire   [31:0] add_ln28_9_fu_574_p2;
wire   [31:0] add_ln28_8_fu_570_p2;
wire   [31:0] add_ln28_7_fu_566_p2;
wire   [31:0] add_ln28_6_fu_562_p2;
wire   [31:0] add_ln28_5_fu_558_p2;
wire   [31:0] add_ln28_4_fu_554_p2;
wire   [31:0] add_ln28_3_fu_550_p2;
wire   [31:0] add_ln28_2_fu_546_p2;
wire   [31:0] add_ln28_1_fu_542_p2;
wire   [31:0] add_ln28_fu_538_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tempB_a),
    .ce(1'b1),
    .dout(grp_fu_320_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tempB_a_1),
    .ce(1'b1),
    .dout(grp_fu_324_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tmp_13),
    .ce(1'b1),
    .dout(grp_fu_328_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tmp_14),
    .ce(1'b1),
    .dout(grp_fu_332_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tmp_15),
    .ce(1'b1),
    .dout(grp_fu_336_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tmp_16),
    .ce(1'b1),
    .dout(grp_fu_340_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tmp_17),
    .ce(1'b1),
    .dout(grp_fu_344_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tmp_18),
    .ce(1'b1),
    .dout(grp_fu_348_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tmp_19),
    .ce(1'b1),
    .dout(grp_fu_352_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tmp_20),
    .ce(1'b1),
    .dout(grp_fu_356_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tmp_21),
    .ce(1'b1),
    .dout(grp_fu_360_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tmp_22),
    .ce(1'b1),
    .dout(grp_fu_364_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tmp_23),
    .ce(1'b1),
    .dout(grp_fu_368_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(tmp_24),
    .ce(1'b1),
    .dout(grp_fu_372_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(trunc_ln145_2),
    .ce(1'b1),
    .dout(grp_fu_376_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_741),
    .din1(trunc_ln145_3),
    .ce(1'b1),
    .dout(grp_fu_380_p2)
);

blockmatmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_285_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_138 <= add_ln26_fu_291_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_138 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_285_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_addr_reg_735 <= zext_ln26_fu_297_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_addr_reg_735_pp0_iter1_reg <= AB_addr_reg_735;
        A_load_reg_741 <= A_q0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        AB_addr_reg_735_pp0_iter2_reg <= AB_addr_reg_735_pp0_iter1_reg;
        AB_addr_reg_735_pp0_iter3_reg <= AB_addr_reg_735_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        mul_ln28_10_reg_866 <= grp_fu_360_p2;
        mul_ln28_11_reg_876 <= grp_fu_364_p2;
        mul_ln28_12_reg_886 <= grp_fu_368_p2;
        mul_ln28_13_reg_896 <= grp_fu_372_p2;
        mul_ln28_14_reg_906 <= grp_fu_376_p2;
        mul_ln28_15_reg_916 <= grp_fu_380_p2;
        mul_ln28_1_reg_776 <= grp_fu_324_p2;
        mul_ln28_2_reg_786 <= grp_fu_328_p2;
        mul_ln28_3_reg_796 <= grp_fu_332_p2;
        mul_ln28_4_reg_806 <= grp_fu_336_p2;
        mul_ln28_5_reg_816 <= grp_fu_340_p2;
        mul_ln28_6_reg_826 <= grp_fu_344_p2;
        mul_ln28_7_reg_836 <= grp_fu_348_p2;
        mul_ln28_8_reg_846 <= grp_fu_352_p2;
        mul_ln28_9_reg_856 <= grp_fu_356_p2;
        mul_ln28_reg_766 <= grp_fu_320_p2;
        tmp_10_reg_871 <= {{AB_q1[383:352]}};
        tmp_11_reg_881 <= {{AB_q1[415:384]}};
        tmp_12_reg_891 <= {{AB_q1[447:416]}};
        tmp_1_reg_781 <= {{AB_q1[95:64]}};
        tmp_25_reg_901 <= {{AB_q1[479:448]}};
        tmp_26_reg_911 <= {{AB_q1[511:480]}};
        tmp_2_reg_791 <= {{AB_q1[127:96]}};
        tmp_3_reg_801 <= {{AB_q1[159:128]}};
        tmp_4_reg_811 <= {{AB_q1[191:160]}};
        tmp_5_reg_821 <= {{AB_q1[223:192]}};
        tmp_6_reg_831 <= {{AB_q1[255:224]}};
        tmp_7_reg_841 <= {{AB_q1[287:256]}};
        tmp_8_reg_851 <= {{AB_q1[319:288]}};
        tmp_9_reg_861 <= {{AB_q1[351:320]}};
        tmp_s_reg_771 <= {{AB_q1[63:32]}};
        trunc_ln28_reg_761 <= trunc_ln28_fu_384_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        AB_ce1 = 1'b1;
    end else begin
        AB_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        AB_we0 = 64'd18446744073709551615;
    end else begin
        AB_we0 = 64'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_285_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 5'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_138;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_address0 = AB_addr_reg_735_pp0_iter3_reg;

assign AB_address1 = AB_addr_reg_735_pp0_iter1_reg;

assign AB_d0 = {{{{{{{{{{{{{{{{add_ln28_15_fu_598_p2}, {add_ln28_14_fu_594_p2}}, {add_ln28_13_fu_590_p2}}, {add_ln28_12_fu_586_p2}}, {add_ln28_11_fu_582_p2}}, {add_ln28_10_fu_578_p2}}, {add_ln28_9_fu_574_p2}}, {add_ln28_8_fu_570_p2}}, {add_ln28_7_fu_566_p2}}, {add_ln28_6_fu_562_p2}}, {add_ln28_5_fu_558_p2}}, {add_ln28_4_fu_554_p2}}, {add_ln28_3_fu_550_p2}}, {add_ln28_2_fu_546_p2}}, {add_ln28_1_fu_542_p2}}, {add_ln28_fu_538_p2}};

assign A_address0 = p_cast_fu_310_p1;

assign add_ln26_fu_291_p2 = (ap_sig_allocacmp_i + 5'd1);

assign add_ln28_10_fu_578_p2 = (tmp_9_reg_861 + mul_ln28_10_reg_866);

assign add_ln28_11_fu_582_p2 = (tmp_10_reg_871 + mul_ln28_11_reg_876);

assign add_ln28_12_fu_586_p2 = (tmp_11_reg_881 + mul_ln28_12_reg_886);

assign add_ln28_13_fu_590_p2 = (tmp_12_reg_891 + mul_ln28_13_reg_896);

assign add_ln28_14_fu_594_p2 = (tmp_25_reg_901 + mul_ln28_14_reg_906);

assign add_ln28_15_fu_598_p2 = (tmp_26_reg_911 + mul_ln28_15_reg_916);

assign add_ln28_1_fu_542_p2 = (tmp_s_reg_771 + mul_ln28_1_reg_776);

assign add_ln28_2_fu_546_p2 = (tmp_1_reg_781 + mul_ln28_2_reg_786);

assign add_ln28_3_fu_550_p2 = (tmp_2_reg_791 + mul_ln28_3_reg_796);

assign add_ln28_4_fu_554_p2 = (tmp_3_reg_801 + mul_ln28_4_reg_806);

assign add_ln28_5_fu_558_p2 = (tmp_4_reg_811 + mul_ln28_5_reg_816);

assign add_ln28_6_fu_562_p2 = (tmp_5_reg_821 + mul_ln28_6_reg_826);

assign add_ln28_7_fu_566_p2 = (tmp_6_reg_831 + mul_ln28_7_reg_836);

assign add_ln28_8_fu_570_p2 = (tmp_7_reg_841 + mul_ln28_8_reg_846);

assign add_ln28_9_fu_574_p2 = (tmp_8_reg_851 + mul_ln28_9_reg_856);

assign add_ln28_fu_538_p2 = (mul_ln28_reg_766 + trunc_ln28_reg_761);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln26_fu_285_p2 = ((ap_sig_allocacmp_i == 5'd16) ? 1'b1 : 1'b0);

assign p_cast_fu_310_p1 = tmp_fu_302_p3;

assign tmp_fu_302_p3 = {{trunc_ln26_fu_281_p1}, {zext_ln23}};

assign trunc_ln26_fu_281_p1 = ap_sig_allocacmp_i[3:0];

assign trunc_ln28_fu_384_p1 = AB_q1[31:0];

assign zext_ln26_fu_297_p1 = ap_sig_allocacmp_i;

endmodule //blockmatmul_Loop_1_proc1_Pipeline_ps_i
