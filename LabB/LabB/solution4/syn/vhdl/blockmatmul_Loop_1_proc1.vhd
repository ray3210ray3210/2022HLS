-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blockmatmul_Loop_1_proc1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AB_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_ce0 : OUT STD_LOGIC;
    AB_we0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    AB_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    AB_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_ce1 : OUT STD_LOGIC;
    AB_q1 : IN STD_LOGIC_VECTOR (511 downto 0);
    it : IN STD_LOGIC_VECTOR (31 downto 0);
    Arows_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    Arows_empty_n : IN STD_LOGIC;
    Arows_read : OUT STD_LOGIC;
    Bcols_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    Bcols_empty_n : IN STD_LOGIC;
    Bcols_read : OUT STD_LOGIC );
end;


architecture behav of blockmatmul_Loop_1_proc1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_ce0 : STD_LOGIC;
    signal A_we0 : STD_LOGIC;
    signal A_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_ce1 : STD_LOGIC;
    signal A_we1 : STD_LOGIC;
    signal Bcols_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln13_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln23_fu_199_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln23_reg_392 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln23_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tempB_a_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempB_a_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_2_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_3_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempB_a_1_reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_457 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Loop_1_proc1_Pipeline_1_fu_130_ap_start : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_1_fu_130_ap_done : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_1_fu_130_ap_idle : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_1_fu_130_ap_ready : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_1_fu_130_AB_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc1_Pipeline_1_fu_130_AB_ce0 : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_1_fu_130_AB_we0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Loop_1_proc1_Pipeline_1_fu_130_AB_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_start : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_done : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_idle : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_ready : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_Arows_read : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_ce0 : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_we0 : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_ce1 : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_we1 : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_start : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_done : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_idle : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_ready : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_ce0 : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_we0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_d0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_ce1 : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_ps_i_fu_144_A_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Loop_1_proc1_Pipeline_ps_i_fu_144_A_ce0 : STD_LOGIC;
    signal grp_Loop_1_proc1_Pipeline_1_fu_130_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call4 : BOOLEAN;
    signal grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal k_fu_114 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_fu_193_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln8_fu_169_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component blockmatmul_Loop_1_proc1_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AB_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_ce0 : OUT STD_LOGIC;
        AB_we0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        AB_d0 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component blockmatmul_Loop_1_proc1_Pipeline_loadA IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Arows_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        Arows_empty_n : IN STD_LOGIC;
        Arows_read : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_we0 : OUT STD_LOGIC;
        A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_we1 : OUT STD_LOGIC;
        A_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blockmatmul_Loop_1_proc1_Pipeline_ps_i IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln23 : IN STD_LOGIC_VECTOR (5 downto 0);
        AB_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_ce0 : OUT STD_LOGIC;
        AB_we0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        AB_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        AB_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_ce1 : OUT STD_LOGIC;
        AB_q1 : IN STD_LOGIC_VECTOR (511 downto 0);
        tempB_a : IN STD_LOGIC_VECTOR (31 downto 0);
        tempB_a_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_13 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_14 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_15 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_16 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_17 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_18 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_19 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_20 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_21 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_22 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_23 : IN STD_LOGIC_VECTOR (31 downto 0);
        tmp_24 : IN STD_LOGIC_VECTOR (31 downto 0);
        trunc_ln145_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        trunc_ln145_3 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blockmatmul_Loop_1_proc1_A_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    A_U : component blockmatmul_Loop_1_proc1_A_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_address0,
        ce0 => A_ce0,
        we0 => A_we0,
        d0 => grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_d0,
        q0 => A_q0,
        address1 => grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_address1,
        ce1 => A_ce1,
        we1 => A_we1,
        d1 => grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_d1);

    grp_Loop_1_proc1_Pipeline_1_fu_130 : component blockmatmul_Loop_1_proc1_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Loop_1_proc1_Pipeline_1_fu_130_ap_start,
        ap_done => grp_Loop_1_proc1_Pipeline_1_fu_130_ap_done,
        ap_idle => grp_Loop_1_proc1_Pipeline_1_fu_130_ap_idle,
        ap_ready => grp_Loop_1_proc1_Pipeline_1_fu_130_ap_ready,
        AB_address0 => grp_Loop_1_proc1_Pipeline_1_fu_130_AB_address0,
        AB_ce0 => grp_Loop_1_proc1_Pipeline_1_fu_130_AB_ce0,
        AB_we0 => grp_Loop_1_proc1_Pipeline_1_fu_130_AB_we0,
        AB_d0 => grp_Loop_1_proc1_Pipeline_1_fu_130_AB_d0);

    grp_Loop_1_proc1_Pipeline_loadA_fu_136 : component blockmatmul_Loop_1_proc1_Pipeline_loadA
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_start,
        ap_done => grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_done,
        ap_idle => grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_idle,
        ap_ready => grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_ready,
        Arows_dout => Arows_dout,
        Arows_empty_n => Arows_empty_n,
        Arows_read => grp_Loop_1_proc1_Pipeline_loadA_fu_136_Arows_read,
        A_address0 => grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_address0,
        A_ce0 => grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_ce0,
        A_we0 => grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_we0,
        A_d0 => grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_d0,
        A_address1 => grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_address1,
        A_ce1 => grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_ce1,
        A_we1 => grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_we1,
        A_d1 => grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_d1);

    grp_Loop_1_proc1_Pipeline_ps_i_fu_144 : component blockmatmul_Loop_1_proc1_Pipeline_ps_i
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_start,
        ap_done => grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_done,
        ap_idle => grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_idle,
        ap_ready => grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_ready,
        zext_ln23 => trunc_ln23_reg_392,
        AB_address0 => grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_address0,
        AB_ce0 => grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_ce0,
        AB_we0 => grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_we0,
        AB_d0 => grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_d0,
        AB_address1 => grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_address1,
        AB_ce1 => grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_ce1,
        AB_q1 => AB_q1,
        tempB_a => tempB_a_reg_397,
        tempB_a_1 => tempB_a_1_reg_412,
        tmp_13 => tmp_13_reg_417,
        tmp_14 => tmp_14_reg_422,
        tmp_15 => tmp_15_reg_427,
        tmp_16 => tmp_16_reg_432,
        tmp_17 => tmp_17_reg_437,
        tmp_18 => tmp_18_reg_442,
        tmp_19 => tmp_19_reg_447,
        tmp_20 => tmp_20_reg_452,
        tmp_21 => tmp_21_reg_457,
        tmp_22 => tmp_22_reg_462,
        tmp_23 => tmp_23_reg_467,
        tmp_24 => tmp_24_reg_472,
        trunc_ln145_2 => trunc_ln145_2_reg_402,
        trunc_ln145_3 => trunc_ln145_3_reg_407,
        A_address0 => grp_Loop_1_proc1_Pipeline_ps_i_fu_144_A_address0,
        A_ce0 => grp_Loop_1_proc1_Pipeline_ps_i_fu_144_A_ce0,
        A_q0 => A_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln23_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Loop_1_proc1_Pipeline_1_fu_130_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Loop_1_proc1_Pipeline_1_fu_130_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_Loop_1_proc1_Pipeline_1_fu_130_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Loop_1_proc1_Pipeline_1_fu_130_ap_ready = ap_const_logic_1)) then 
                    grp_Loop_1_proc1_Pipeline_1_fu_130_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln13_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Loop_1_proc1_Pipeline_1_fu_130_ap_done = ap_const_logic_1))) then 
                    grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_ready = ap_const_logic_1)) then 
                    grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = Bcols_empty_n))) then 
                    grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_ready = ap_const_logic_1)) then 
                    grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                k_fu_114 <= ap_const_lv7_0;
            elsif (((icmp_ln23_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_fu_114 <= add_ln23_fu_193_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tempB_a_1_reg_412 <= Bcols_dout(63 downto 32);
                tempB_a_reg_397 <= tempB_a_fu_208_p1;
                tmp_13_reg_417 <= Bcols_dout(95 downto 64);
                tmp_14_reg_422 <= Bcols_dout(127 downto 96);
                tmp_15_reg_427 <= Bcols_dout(159 downto 128);
                tmp_16_reg_432 <= Bcols_dout(191 downto 160);
                tmp_17_reg_437 <= Bcols_dout(223 downto 192);
                tmp_18_reg_442 <= Bcols_dout(255 downto 224);
                tmp_19_reg_447 <= Bcols_dout(287 downto 256);
                tmp_20_reg_452 <= Bcols_dout(319 downto 288);
                tmp_21_reg_457 <= Bcols_dout(351 downto 320);
                tmp_22_reg_462 <= Bcols_dout(383 downto 352);
                tmp_23_reg_467 <= Bcols_dout(415 downto 384);
                tmp_24_reg_472 <= Bcols_dout(447 downto 416);
                trunc_ln145_2_reg_402 <= Bcols_dout(479 downto 448);
                trunc_ln145_3_reg_407 <= Bcols_dout(511 downto 480);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                trunc_ln23_reg_392 <= trunc_ln23_fu_199_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, Bcols_empty_n, ap_CS_fsm_state6, icmp_ln13_fu_173_p2, ap_CS_fsm_state2, ap_CS_fsm_state5, icmp_ln23_fu_187_p2, grp_Loop_1_proc1_Pipeline_1_fu_130_ap_done, grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_done, grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln13_fu_173_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Loop_1_proc1_Pipeline_1_fu_130_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((icmp_ln13_fu_173_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_Loop_1_proc1_Pipeline_1_fu_130_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln23_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = Bcols_empty_n))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    AB_address0_assign_proc : process(ap_CS_fsm_state2, grp_Loop_1_proc1_Pipeline_1_fu_130_AB_address0, grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_address0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            AB_address0 <= grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            AB_address0 <= grp_Loop_1_proc1_Pipeline_1_fu_130_AB_address0;
        else 
            AB_address0 <= "XXXX";
        end if; 
    end process;

    AB_address1 <= grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_address1;

    AB_ce0_assign_proc : process(ap_CS_fsm_state2, grp_Loop_1_proc1_Pipeline_1_fu_130_AB_ce0, grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            AB_ce0 <= grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            AB_ce0 <= grp_Loop_1_proc1_Pipeline_1_fu_130_AB_ce0;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_ce1_assign_proc : process(grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_ce1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            AB_ce1 <= grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_ce1;
        else 
            AB_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    AB_d0_assign_proc : process(ap_CS_fsm_state2, grp_Loop_1_proc1_Pipeline_1_fu_130_AB_d0, grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_d0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            AB_d0 <= grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            AB_d0 <= grp_Loop_1_proc1_Pipeline_1_fu_130_AB_d0;
        else 
            AB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    AB_we0_assign_proc : process(ap_CS_fsm_state2, grp_Loop_1_proc1_Pipeline_1_fu_130_AB_we0, grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            AB_we0 <= grp_Loop_1_proc1_Pipeline_ps_i_fu_144_AB_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            AB_we0 <= grp_Loop_1_proc1_Pipeline_1_fu_130_AB_we0;
        else 
            AB_we0 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;


    A_address0_assign_proc : process(grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_address0, grp_Loop_1_proc1_Pipeline_ps_i_fu_144_A_address0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address0 <= grp_Loop_1_proc1_Pipeline_ps_i_fu_144_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_address0;
        else 
            A_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_ce0, grp_Loop_1_proc1_Pipeline_ps_i_fu_144_A_ce0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_ce0 <= grp_Loop_1_proc1_Pipeline_ps_i_fu_144_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_ce0 <= grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_ce0;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_ce1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_ce1 <= grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_ce1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_we0_assign_proc : process(grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_we0 <= grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_we0;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_we1_assign_proc : process(grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_we1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_we1 <= grp_Loop_1_proc1_Pipeline_loadA_fu_136_A_we1;
        else 
            A_we1 <= ap_const_logic_0;
        end if; 
    end process;


    Arows_read_assign_proc : process(grp_Loop_1_proc1_Pipeline_loadA_fu_136_Arows_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Arows_read <= grp_Loop_1_proc1_Pipeline_loadA_fu_136_Arows_read;
        else 
            Arows_read <= ap_const_logic_0;
        end if; 
    end process;


    Bcols_blk_n_assign_proc : process(Bcols_empty_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Bcols_blk_n <= Bcols_empty_n;
        else 
            Bcols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Bcols_read_assign_proc : process(Bcols_empty_n, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = Bcols_empty_n))) then 
            Bcols_read <= ap_const_logic_1;
        else 
            Bcols_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln23_fu_193_p2 <= std_logic_vector(unsigned(k_fu_114) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_Loop_1_proc1_Pipeline_1_fu_130_ap_done)
    begin
        if ((grp_Loop_1_proc1_Pipeline_1_fu_130_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_done)
    begin
        if ((grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(Bcols_empty_n)
    begin
        if ((ap_const_logic_0 = Bcols_empty_n)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_done)
    begin
        if ((grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call4_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call4 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, icmp_ln23_fu_187_p2)
    begin
        if (((icmp_ln23_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln23_fu_187_p2)
    begin
        if (((icmp_ln23_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_Loop_1_proc1_Pipeline_1_fu_130_ap_start <= grp_Loop_1_proc1_Pipeline_1_fu_130_ap_start_reg;
    grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_start <= grp_Loop_1_proc1_Pipeline_loadA_fu_136_ap_start_reg;
    grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_start <= grp_Loop_1_proc1_Pipeline_ps_i_fu_144_ap_start_reg;
    icmp_ln13_fu_173_p2 <= "1" when (trunc_ln8_fu_169_p1 = ap_const_lv2_0) else "0";
    icmp_ln23_fu_187_p2 <= "1" when (k_fu_114 = ap_const_lv7_40) else "0";
    tempB_a_fu_208_p1 <= Bcols_dout(32 - 1 downto 0);
    trunc_ln23_fu_199_p1 <= k_fu_114(6 - 1 downto 0);
    trunc_ln8_fu_169_p1 <= it(2 - 1 downto 0);
end behav;
