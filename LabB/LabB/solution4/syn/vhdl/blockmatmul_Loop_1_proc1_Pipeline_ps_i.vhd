-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blockmatmul_Loop_1_proc1_Pipeline_ps_i is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln23 : IN STD_LOGIC_VECTOR (5 downto 0);
    AB_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_ce0 : OUT STD_LOGIC;
    AB_we0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    AB_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    AB_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_ce1 : OUT STD_LOGIC;
    AB_q1 : IN STD_LOGIC_VECTOR (511 downto 0);
    tempB_a : IN STD_LOGIC_VECTOR (31 downto 0);
    tempB_a_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_16 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_17 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_18 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_19 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_20 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_21 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_22 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_23 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_24 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln145_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln145_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of blockmatmul_Loop_1_proc1_Pipeline_ps_i is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln26_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal AB_addr_reg_735 : STD_LOGIC_VECTOR (3 downto 0);
    signal AB_addr_reg_735_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal AB_addr_reg_735_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal AB_addr_reg_735_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal A_load_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln28_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln28_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_771 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_1_reg_776 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_2_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_791 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_3_reg_796 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_4_reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_5_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_6_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_7_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_8_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_9_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_10_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_871 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_11_reg_876 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_881 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_12_reg_886 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_891 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_13_reg_896 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_14_reg_906 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_15_reg_916 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln26_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_291_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln26_fu_281_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_302_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_15_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_14_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_13_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_12_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_11_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_10_fu_578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_9_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_8_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_7_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_6_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_5_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_4_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_3_fu_550_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_2_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_1_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component blockmatmul_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blockmatmul_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_2_1_U4 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tempB_a,
        ce => ap_const_logic_1,
        dout => grp_fu_320_p2);

    mul_32s_32s_32_2_1_U5 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tempB_a_1,
        ce => ap_const_logic_1,
        dout => grp_fu_324_p2);

    mul_32s_32s_32_2_1_U6 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tmp_13,
        ce => ap_const_logic_1,
        dout => grp_fu_328_p2);

    mul_32s_32s_32_2_1_U7 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tmp_14,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    mul_32s_32s_32_2_1_U8 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tmp_15,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p2);

    mul_32s_32s_32_2_1_U9 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tmp_16,
        ce => ap_const_logic_1,
        dout => grp_fu_340_p2);

    mul_32s_32s_32_2_1_U10 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tmp_17,
        ce => ap_const_logic_1,
        dout => grp_fu_344_p2);

    mul_32s_32s_32_2_1_U11 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tmp_18,
        ce => ap_const_logic_1,
        dout => grp_fu_348_p2);

    mul_32s_32s_32_2_1_U12 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tmp_19,
        ce => ap_const_logic_1,
        dout => grp_fu_352_p2);

    mul_32s_32s_32_2_1_U13 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tmp_20,
        ce => ap_const_logic_1,
        dout => grp_fu_356_p2);

    mul_32s_32s_32_2_1_U14 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tmp_21,
        ce => ap_const_logic_1,
        dout => grp_fu_360_p2);

    mul_32s_32s_32_2_1_U15 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tmp_22,
        ce => ap_const_logic_1,
        dout => grp_fu_364_p2);

    mul_32s_32s_32_2_1_U16 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tmp_23,
        ce => ap_const_logic_1,
        dout => grp_fu_368_p2);

    mul_32s_32s_32_2_1_U17 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => tmp_24,
        ce => ap_const_logic_1,
        dout => grp_fu_372_p2);

    mul_32s_32s_32_2_1_U18 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => trunc_ln145_2,
        ce => ap_const_logic_1,
        dout => grp_fu_376_p2);

    mul_32s_32s_32_2_1_U19 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_741,
        din1 => trunc_ln145_3,
        ce => ap_const_logic_1,
        dout => grp_fu_380_p2);

    flow_control_loop_pipe_sequential_init_U : component blockmatmul_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln26_fu_285_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_138 <= add_ln26_fu_291_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_138 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_285_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                AB_addr_reg_735 <= zext_ln26_fu_297_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                AB_addr_reg_735_pp0_iter1_reg <= AB_addr_reg_735;
                A_load_reg_741 <= A_q0;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                AB_addr_reg_735_pp0_iter2_reg <= AB_addr_reg_735_pp0_iter1_reg;
                AB_addr_reg_735_pp0_iter3_reg <= AB_addr_reg_735_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                mul_ln28_10_reg_866 <= grp_fu_360_p2;
                mul_ln28_11_reg_876 <= grp_fu_364_p2;
                mul_ln28_12_reg_886 <= grp_fu_368_p2;
                mul_ln28_13_reg_896 <= grp_fu_372_p2;
                mul_ln28_14_reg_906 <= grp_fu_376_p2;
                mul_ln28_15_reg_916 <= grp_fu_380_p2;
                mul_ln28_1_reg_776 <= grp_fu_324_p2;
                mul_ln28_2_reg_786 <= grp_fu_328_p2;
                mul_ln28_3_reg_796 <= grp_fu_332_p2;
                mul_ln28_4_reg_806 <= grp_fu_336_p2;
                mul_ln28_5_reg_816 <= grp_fu_340_p2;
                mul_ln28_6_reg_826 <= grp_fu_344_p2;
                mul_ln28_7_reg_836 <= grp_fu_348_p2;
                mul_ln28_8_reg_846 <= grp_fu_352_p2;
                mul_ln28_9_reg_856 <= grp_fu_356_p2;
                mul_ln28_reg_766 <= grp_fu_320_p2;
                tmp_10_reg_871 <= AB_q1(383 downto 352);
                tmp_11_reg_881 <= AB_q1(415 downto 384);
                tmp_12_reg_891 <= AB_q1(447 downto 416);
                tmp_1_reg_781 <= AB_q1(95 downto 64);
                tmp_25_reg_901 <= AB_q1(479 downto 448);
                tmp_26_reg_911 <= AB_q1(511 downto 480);
                tmp_2_reg_791 <= AB_q1(127 downto 96);
                tmp_3_reg_801 <= AB_q1(159 downto 128);
                tmp_4_reg_811 <= AB_q1(191 downto 160);
                tmp_5_reg_821 <= AB_q1(223 downto 192);
                tmp_6_reg_831 <= AB_q1(255 downto 224);
                tmp_7_reg_841 <= AB_q1(287 downto 256);
                tmp_8_reg_851 <= AB_q1(319 downto 288);
                tmp_9_reg_861 <= AB_q1(351 downto 320);
                tmp_s_reg_771 <= AB_q1(63 downto 32);
                trunc_ln28_reg_761 <= trunc_ln28_fu_384_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    AB_address0 <= AB_addr_reg_735_pp0_iter3_reg;
    AB_address1 <= AB_addr_reg_735_pp0_iter1_reg;

    AB_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_ce0 <= ap_const_logic_1;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            AB_ce1 <= ap_const_logic_1;
        else 
            AB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_d0 <= (((((((((((((((add_ln28_15_fu_598_p2 & add_ln28_14_fu_594_p2) & add_ln28_13_fu_590_p2) & add_ln28_12_fu_586_p2) & add_ln28_11_fu_582_p2) & add_ln28_10_fu_578_p2) & add_ln28_9_fu_574_p2) & add_ln28_8_fu_570_p2) & add_ln28_7_fu_566_p2) & add_ln28_6_fu_562_p2) & add_ln28_5_fu_558_p2) & add_ln28_4_fu_554_p2) & add_ln28_3_fu_550_p2) & add_ln28_2_fu_546_p2) & add_ln28_1_fu_542_p2) & add_ln28_fu_538_p2);

    AB_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_we0 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
        else 
            AB_we0 <= ap_const_lv64_0;
        end if; 
    end process;

    A_address0 <= p_cast_fu_310_p1(10 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln26_fu_291_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv5_1));
    add_ln28_10_fu_578_p2 <= std_logic_vector(unsigned(tmp_9_reg_861) + unsigned(mul_ln28_10_reg_866));
    add_ln28_11_fu_582_p2 <= std_logic_vector(unsigned(tmp_10_reg_871) + unsigned(mul_ln28_11_reg_876));
    add_ln28_12_fu_586_p2 <= std_logic_vector(unsigned(tmp_11_reg_881) + unsigned(mul_ln28_12_reg_886));
    add_ln28_13_fu_590_p2 <= std_logic_vector(unsigned(tmp_12_reg_891) + unsigned(mul_ln28_13_reg_896));
    add_ln28_14_fu_594_p2 <= std_logic_vector(unsigned(tmp_25_reg_901) + unsigned(mul_ln28_14_reg_906));
    add_ln28_15_fu_598_p2 <= std_logic_vector(unsigned(tmp_26_reg_911) + unsigned(mul_ln28_15_reg_916));
    add_ln28_1_fu_542_p2 <= std_logic_vector(unsigned(tmp_s_reg_771) + unsigned(mul_ln28_1_reg_776));
    add_ln28_2_fu_546_p2 <= std_logic_vector(unsigned(tmp_1_reg_781) + unsigned(mul_ln28_2_reg_786));
    add_ln28_3_fu_550_p2 <= std_logic_vector(unsigned(tmp_2_reg_791) + unsigned(mul_ln28_3_reg_796));
    add_ln28_4_fu_554_p2 <= std_logic_vector(unsigned(tmp_3_reg_801) + unsigned(mul_ln28_4_reg_806));
    add_ln28_5_fu_558_p2 <= std_logic_vector(unsigned(tmp_4_reg_811) + unsigned(mul_ln28_5_reg_816));
    add_ln28_6_fu_562_p2 <= std_logic_vector(unsigned(tmp_5_reg_821) + unsigned(mul_ln28_6_reg_826));
    add_ln28_7_fu_566_p2 <= std_logic_vector(unsigned(tmp_6_reg_831) + unsigned(mul_ln28_7_reg_836));
    add_ln28_8_fu_570_p2 <= std_logic_vector(unsigned(tmp_7_reg_841) + unsigned(mul_ln28_8_reg_846));
    add_ln28_9_fu_574_p2 <= std_logic_vector(unsigned(tmp_8_reg_851) + unsigned(mul_ln28_9_reg_856));
    add_ln28_fu_538_p2 <= std_logic_vector(unsigned(mul_ln28_reg_766) + unsigned(trunc_ln28_reg_761));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln26_fu_285_p2)
    begin
        if (((icmp_ln26_fu_285_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_138, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_138;
        end if; 
    end process;

    icmp_ln26_fu_285_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv5_10) else "0";
    p_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_302_p3),64));
    tmp_fu_302_p3 <= (trunc_ln26_fu_281_p1 & zext_ln23);
    trunc_ln26_fu_281_p1 <= ap_sig_allocacmp_i(4 - 1 downto 0);
    trunc_ln28_fu_384_p1 <= AB_q1(32 - 1 downto 0);
    zext_ln26_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
end behav;
