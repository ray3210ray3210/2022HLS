// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module blockmatmul_blockmatmul_Pipeline_ps_i (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln23,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0,
        AB_q0,
        AB_address1,
        AB_ce1,
        AB_we1,
        AB_d1,
        AB_q1,
        tmp_a_0,
        tmp_a_1,
        tmp_a_2,
        tmp_a_3,
        tmp_a_4,
        tmp_a_5,
        tmp_a_6,
        tmp_a_7,
        tmp_a_8,
        tmp_a_9,
        tmp_a_10,
        tmp_a_11,
        tmp_a_12,
        tmp_a_13,
        tmp_a_14,
        tmp_a_15,
        A_address0,
        A_ce0,
        A_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 16'd1;
parameter    ap_ST_fsm_pp0_stage1 = 16'd2;
parameter    ap_ST_fsm_pp0_stage2 = 16'd4;
parameter    ap_ST_fsm_pp0_stage3 = 16'd8;
parameter    ap_ST_fsm_pp0_stage4 = 16'd16;
parameter    ap_ST_fsm_pp0_stage5 = 16'd32;
parameter    ap_ST_fsm_pp0_stage6 = 16'd64;
parameter    ap_ST_fsm_pp0_stage7 = 16'd128;
parameter    ap_ST_fsm_pp0_stage8 = 16'd256;
parameter    ap_ST_fsm_pp0_stage9 = 16'd512;
parameter    ap_ST_fsm_pp0_stage10 = 16'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 16'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 16'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 16'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 16'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] zext_ln23;
output  [7:0] AB_address0;
output   AB_ce0;
output   AB_we0;
output  [31:0] AB_d0;
input  [31:0] AB_q0;
output  [7:0] AB_address1;
output   AB_ce1;
output   AB_we1;
output  [31:0] AB_d1;
input  [31:0] AB_q1;
input  [31:0] tmp_a_0;
input  [31:0] tmp_a_1;
input  [31:0] tmp_a_2;
input  [31:0] tmp_a_3;
input  [31:0] tmp_a_4;
input  [31:0] tmp_a_5;
input  [31:0] tmp_a_6;
input  [31:0] tmp_a_7;
input  [31:0] tmp_a_8;
input  [31:0] tmp_a_9;
input  [31:0] tmp_a_10;
input  [31:0] tmp_a_11;
input  [31:0] tmp_a_12;
input  [31:0] tmp_a_13;
input  [31:0] tmp_a_14;
input  [31:0] tmp_a_15;
output  [9:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;

reg ap_idle;
reg[7:0] AB_address0;
reg AB_ce0;
reg AB_we0;
reg[31:0] AB_d0;
reg[7:0] AB_address1;
reg AB_ce1;
reg AB_we1;
reg[31:0] AB_d1;
reg A_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_state32_pp0_stage15_iter1;
wire    ap_block_pp0_stage15_subdone;
reg   [0:0] icmp_ln26_reg_809;
reg    ap_condition_exit_pp0_iter0_stage15;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] reg_360;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state18_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state21_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] reg_364;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state22_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] reg_369;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state19_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state23_pp0_stage6_iter1;
wire    ap_block_pp0_stage6_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state17_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln26_fu_385_p2;
wire   [7:0] tmp_s_fu_410_p3;
reg   [7:0] tmp_s_reg_818;
reg   [7:0] tmp_s_reg_818_pp0_iter1_reg;
reg   [7:0] AB_addr_reg_836;
reg   [7:0] AB_addr_1_reg_841;
reg   [7:0] AB_addr_2_reg_846;
reg   [7:0] AB_addr_3_reg_851;
reg  signed [31:0] A_load_reg_856;
reg   [7:0] AB_addr_4_reg_876;
reg   [7:0] AB_addr_5_reg_881;
reg   [31:0] AB_load_3_reg_886;
reg   [7:0] AB_addr_6_reg_891;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state20_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg   [7:0] AB_addr_7_reg_896;
wire   [31:0] grp_fu_479_p2;
reg   [31:0] mul_ln28_reg_901;
reg   [31:0] AB_load_4_reg_906;
reg   [31:0] AB_load_5_reg_911;
reg   [7:0] AB_addr_8_reg_916;
reg   [7:0] AB_addr_9_reg_921;
wire   [31:0] add_ln28_fu_527_p2;
reg   [31:0] add_ln28_reg_927;
wire   [31:0] grp_fu_503_p2;
reg   [31:0] mul_ln28_1_reg_932;
reg   [31:0] AB_load_7_reg_937;
reg   [7:0] AB_addr_10_reg_942;
reg   [7:0] AB_addr_11_reg_947;
wire   [31:0] add_ln28_1_fu_556_p2;
reg   [31:0] add_ln28_1_reg_953;
wire   [31:0] grp_fu_532_p2;
reg   [31:0] mul_ln28_2_reg_958;
reg   [31:0] AB_load_9_reg_963;
wire   [31:0] add_ln28_2_fu_565_p2;
reg   [31:0] add_ln28_2_reg_968;
wire   [31:0] grp_fu_561_p2;
reg   [31:0] mul_ln28_3_reg_973;
reg   [31:0] AB_load_11_reg_978;
wire   [31:0] add_ln28_3_fu_574_p2;
reg   [31:0] add_ln28_3_reg_983;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state24_pp0_stage7_iter1;
wire    ap_block_pp0_stage7_11001;
wire   [31:0] grp_fu_570_p2;
reg   [31:0] mul_ln28_4_reg_988;
wire   [31:0] add_ln28_4_fu_582_p2;
reg   [31:0] add_ln28_4_reg_993;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_state25_pp0_stage8_iter1;
wire    ap_block_pp0_stage8_11001;
wire   [31:0] grp_fu_578_p2;
reg   [31:0] mul_ln28_5_reg_998;
wire   [31:0] add_ln28_5_fu_590_p2;
reg   [31:0] add_ln28_5_reg_1003;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_state26_pp0_stage9_iter1;
wire    ap_block_pp0_stage9_11001;
wire   [31:0] grp_fu_586_p2;
reg   [31:0] mul_ln28_6_reg_1008;
wire   [31:0] add_ln28_6_fu_598_p2;
reg   [31:0] add_ln28_6_reg_1013;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_state27_pp0_stage10_iter1;
wire    ap_block_pp0_stage10_11001;
wire   [31:0] grp_fu_594_p2;
reg   [31:0] mul_ln28_7_reg_1018;
wire   [31:0] grp_fu_603_p2;
reg   [31:0] mul_ln28_8_reg_1023;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_state28_pp0_stage11_iter1;
wire    ap_block_pp0_stage11_11001;
wire   [31:0] grp_fu_612_p2;
reg   [31:0] mul_ln28_9_reg_1028;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_state29_pp0_stage12_iter1;
wire    ap_block_pp0_stage12_11001;
wire   [31:0] grp_fu_622_p2;
reg   [31:0] mul_ln28_10_reg_1033;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_block_state30_pp0_stage13_iter1;
wire    ap_block_pp0_stage13_11001;
wire   [31:0] grp_fu_631_p2;
reg   [31:0] mul_ln28_11_reg_1038;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_block_state31_pp0_stage14_iter1;
wire    ap_block_pp0_stage14_11001;
wire   [31:0] grp_fu_641_p2;
reg   [31:0] mul_ln28_12_reg_1043;
wire    ap_block_pp0_stage15_11001;
wire   [31:0] grp_fu_650_p2;
reg   [31:0] mul_ln28_13_reg_1048;
wire   [31:0] grp_fu_654_p2;
reg   [31:0] mul_ln28_14_reg_1053;
wire   [31:0] grp_fu_658_p2;
reg   [31:0] mul_ln28_15_reg_1058;
reg   [7:0] AB_addr_12_reg_1063;
reg   [7:0] AB_addr_13_reg_1069;
reg   [7:0] AB_addr_14_reg_1074;
reg   [7:0] AB_addr_15_reg_1080;
wire   [31:0] add_ln28_12_fu_702_p2;
reg   [31:0] add_ln28_12_reg_1085;
wire   [31:0] add_ln28_13_fu_707_p2;
reg   [31:0] add_ln28_13_reg_1090;
wire   [31:0] add_ln28_14_fu_712_p2;
reg   [31:0] add_ln28_14_reg_1095;
wire   [31:0] add_ln28_15_fu_717_p2;
reg   [31:0] add_ln28_15_reg_1100;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] p_cast_fu_405_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln28_fu_418_p1;
wire   [63:0] zext_ln28_1_fu_429_p1;
wire   [63:0] zext_ln28_2_fu_444_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln28_3_fu_454_p1;
wire   [63:0] zext_ln28_4_fu_464_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln28_5_fu_474_p1;
wire   [63:0] zext_ln28_6_fu_488_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln28_7_fu_498_p1;
wire   [63:0] zext_ln28_8_fu_512_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln28_9_fu_522_p1;
wire   [63:0] zext_ln28_10_fu_541_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln28_11_fu_551_p1;
wire   [63:0] zext_ln28_12_fu_667_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln28_13_fu_677_p1;
wire   [63:0] zext_ln28_14_fu_687_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln28_15_fu_697_p1;
reg   [4:0] i_fu_104;
wire   [4:0] add_ln26_fu_391_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage9;
wire    ap_block_pp0_stage10;
wire    ap_block_pp0_stage11;
wire   [31:0] add_ln28_7_fu_607_p2;
wire   [31:0] add_ln28_8_fu_616_p2;
wire    ap_block_pp0_stage12;
wire   [31:0] add_ln28_9_fu_626_p2;
wire    ap_block_pp0_stage13;
wire   [31:0] add_ln28_10_fu_635_p2;
wire    ap_block_pp0_stage14;
wire   [31:0] add_ln28_11_fu_645_p2;
wire    ap_block_pp0_stage15;
wire   [3:0] empty_fu_381_p1;
wire   [9:0] tmp_fu_397_p3;
wire   [7:0] or_ln28_fu_423_p2;
wire   [7:0] or_ln28_1_fu_439_p2;
wire   [7:0] or_ln28_2_fu_449_p2;
wire   [7:0] or_ln28_3_fu_459_p2;
wire   [7:0] or_ln28_4_fu_469_p2;
wire   [7:0] or_ln28_5_fu_483_p2;
wire   [7:0] or_ln28_6_fu_493_p2;
wire   [7:0] or_ln28_7_fu_507_p2;
wire   [7:0] or_ln28_8_fu_517_p2;
wire   [7:0] or_ln28_9_fu_536_p2;
wire   [7:0] or_ln28_10_fu_546_p2;
wire   [7:0] or_ln28_11_fu_662_p2;
wire   [7:0] or_ln28_12_fu_672_p2;
wire   [7:0] or_ln28_13_fu_682_p2;
wire   [7:0] or_ln28_14_fu_692_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [15:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_0),
    .ce(1'b1),
    .dout(grp_fu_479_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_1),
    .ce(1'b1),
    .dout(grp_fu_503_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_2),
    .ce(1'b1),
    .dout(grp_fu_532_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_3),
    .ce(1'b1),
    .dout(grp_fu_561_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_4),
    .ce(1'b1),
    .dout(grp_fu_570_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_5),
    .ce(1'b1),
    .dout(grp_fu_578_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_6),
    .ce(1'b1),
    .dout(grp_fu_586_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_7),
    .ce(1'b1),
    .dout(grp_fu_594_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_8),
    .ce(1'b1),
    .dout(grp_fu_603_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_9),
    .ce(1'b1),
    .dout(grp_fu_612_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_10),
    .ce(1'b1),
    .dout(grp_fu_622_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_11),
    .ce(1'b1),
    .dout(grp_fu_631_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_12),
    .ce(1'b1),
    .dout(grp_fu_641_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_13),
    .ce(1'b1),
    .dout(grp_fu_650_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_14),
    .ce(1'b1),
    .dout(grp_fu_654_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_856),
    .din1(tmp_a_15),
    .ce(1'b1),
    .dout(grp_fu_658_p2)
);

blockmatmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage15),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage15)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln26_fu_385_p2 == 1'd0))) begin
            i_fu_104 <= add_ln26_fu_391_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_104 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            reg_364 <= AB_q1;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            reg_364 <= AB_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        AB_addr_10_reg_942[7 : 4] <= zext_ln28_10_fu_541_p1[7 : 4];
        AB_addr_11_reg_947[7 : 4] <= zext_ln28_11_fu_551_p1[7 : 4];
        add_ln28_1_reg_953 <= add_ln28_1_fu_556_p2;
        mul_ln28_2_reg_958 <= grp_fu_532_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        AB_addr_12_reg_1063[7 : 4] <= zext_ln28_12_fu_667_p1[7 : 4];
        AB_addr_13_reg_1069[7 : 4] <= zext_ln28_13_fu_677_p1[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        AB_addr_14_reg_1074[7 : 4] <= zext_ln28_14_fu_687_p1[7 : 4];
        AB_addr_15_reg_1080[7 : 4] <= zext_ln28_15_fu_697_p1[7 : 4];
        add_ln28_12_reg_1085 <= add_ln28_12_fu_702_p2;
        add_ln28_13_reg_1090 <= add_ln28_13_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_fu_385_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_addr_1_reg_841[7 : 4] <= zext_ln28_1_fu_429_p1[7 : 4];
        AB_addr_reg_836[7 : 4] <= zext_ln28_fu_418_p1[7 : 4];
        tmp_s_reg_818[7 : 4] <= tmp_s_fu_410_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        AB_addr_2_reg_846[7 : 4] <= zext_ln28_2_fu_444_p1[7 : 4];
        AB_addr_3_reg_851[7 : 4] <= zext_ln28_3_fu_454_p1[7 : 4];
        A_load_reg_856 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        AB_addr_4_reg_876[7 : 4] <= zext_ln28_4_fu_464_p1[7 : 4];
        AB_addr_5_reg_881[7 : 4] <= zext_ln28_5_fu_474_p1[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        AB_addr_6_reg_891[7 : 4] <= zext_ln28_6_fu_488_p1[7 : 4];
        AB_addr_7_reg_896[7 : 4] <= zext_ln28_7_fu_498_p1[7 : 4];
        mul_ln28_reg_901 <= grp_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        AB_addr_8_reg_916[7 : 4] <= zext_ln28_8_fu_512_p1[7 : 4];
        AB_addr_9_reg_921[7 : 4] <= zext_ln28_9_fu_522_p1[7 : 4];
        add_ln28_reg_927 <= add_ln28_fu_527_p2;
        mul_ln28_1_reg_932 <= grp_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        AB_load_11_reg_978 <= AB_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        AB_load_3_reg_886 <= AB_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        AB_load_4_reg_906 <= AB_q1;
        AB_load_5_reg_911 <= AB_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        AB_load_7_reg_937 <= AB_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        AB_load_9_reg_963 <= AB_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        add_ln28_14_reg_1095 <= add_ln28_14_fu_712_p2;
        add_ln28_15_reg_1100 <= add_ln28_15_fu_717_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_ln28_2_reg_968 <= add_ln28_2_fu_565_p2;
        mul_ln28_3_reg_973 <= grp_fu_561_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_ln28_3_reg_983 <= add_ln28_3_fu_574_p2;
        mul_ln28_4_reg_988 <= grp_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        add_ln28_4_reg_993 <= add_ln28_4_fu_582_p2;
        mul_ln28_5_reg_998 <= grp_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        add_ln28_5_reg_1003 <= add_ln28_5_fu_590_p2;
        mul_ln28_6_reg_1008 <= grp_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        add_ln28_6_reg_1013 <= add_ln28_6_fu_598_p2;
        mul_ln28_7_reg_1018 <= grp_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln26_reg_809 <= icmp_ln26_fu_385_p2;
        mul_ln28_13_reg_1048 <= grp_fu_650_p2;
        tmp_s_reg_818_pp0_iter1_reg[7 : 4] <= tmp_s_reg_818[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        mul_ln28_10_reg_1033 <= grp_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        mul_ln28_11_reg_1038 <= grp_fu_631_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        mul_ln28_12_reg_1043 <= grp_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln28_14_reg_1053 <= grp_fu_654_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul_ln28_15_reg_1058 <= grp_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        mul_ln28_8_reg_1023 <= grp_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        mul_ln28_9_reg_1028 <= grp_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_360 <= AB_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_369 <= AB_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        AB_address0 = AB_addr_15_reg_1080;
    end else if (((1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        AB_address0 = AB_addr_14_reg_1074;
    end else if (((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        AB_address0 = AB_addr_13_reg_1069;
    end else if (((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        AB_address0 = AB_addr_12_reg_1063;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        AB_address0 = zext_ln28_15_fu_697_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        AB_address0 = zext_ln28_13_fu_677_p1;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        AB_address0 = AB_addr_7_reg_896;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        AB_address0 = AB_addr_5_reg_881;
    end else if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        AB_address0 = AB_addr_3_reg_851;
    end else if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        AB_address0 = AB_addr_1_reg_841;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        AB_address0 = zext_ln28_11_fu_551_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        AB_address0 = zext_ln28_9_fu_522_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        AB_address0 = zext_ln28_7_fu_498_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        AB_address0 = zext_ln28_5_fu_474_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        AB_address0 = zext_ln28_3_fu_454_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_address0 = zext_ln28_1_fu_429_p1;
    end else begin
        AB_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        AB_address1 = zext_ln28_14_fu_687_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        AB_address1 = zext_ln28_12_fu_667_p1;
    end else if (((1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        AB_address1 = AB_addr_11_reg_947;
    end else if (((1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        AB_address1 = AB_addr_10_reg_942;
    end else if (((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        AB_address1 = AB_addr_9_reg_921;
    end else if (((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        AB_address1 = AB_addr_8_reg_916;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        AB_address1 = AB_addr_6_reg_891;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        AB_address1 = AB_addr_4_reg_876;
    end else if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        AB_address1 = AB_addr_2_reg_846;
    end else if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        AB_address1 = AB_addr_reg_836;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        AB_address1 = zext_ln28_10_fu_541_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        AB_address1 = zext_ln28_8_fu_512_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        AB_address1 = zext_ln28_6_fu_488_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        AB_address1 = zext_ln28_4_fu_464_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        AB_address1 = zext_ln28_2_fu_444_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_address1 = zext_ln28_fu_418_p1;
    end else begin
        AB_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        AB_ce1 = 1'b1;
    end else begin
        AB_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        AB_d0 = add_ln28_15_reg_1100;
    end else if (((1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        AB_d0 = add_ln28_14_reg_1095;
    end else if (((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        AB_d0 = add_ln28_13_reg_1090;
    end else if (((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        AB_d0 = add_ln28_12_reg_1085;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        AB_d0 = add_ln28_7_fu_607_p2;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        AB_d0 = add_ln28_5_reg_1003;
    end else if (((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        AB_d0 = add_ln28_3_reg_983;
    end else if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        AB_d0 = add_ln28_1_reg_953;
    end else begin
        AB_d0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            AB_d1 = add_ln28_11_fu_645_p2;
        end else if (((1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
            AB_d1 = add_ln28_10_fu_635_p2;
        end else if (((1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
            AB_d1 = add_ln28_9_fu_626_p2;
        end else if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
            AB_d1 = add_ln28_8_fu_616_p2;
        end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            AB_d1 = add_ln28_6_reg_1013;
        end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            AB_d1 = add_ln28_4_reg_993;
        end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            AB_d1 = add_ln28_2_reg_968;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            AB_d1 = add_ln28_reg_927;
        end else begin
            AB_d1 = 'bx;
        end
    end else begin
        AB_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((icmp_ln26_reg_809 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        AB_we1 = 1'b1;
    end else begin
        AB_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_809 == 1'd1) & (1'b0 == ap_block_pp0_stage15_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        ap_condition_exit_pp0_iter0_stage15 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage15 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage15_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_104;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = p_cast_fu_405_p1;

assign add_ln26_fu_391_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign add_ln28_10_fu_635_p2 = (reg_369 + mul_ln28_10_reg_1033);

assign add_ln28_11_fu_645_p2 = (AB_load_11_reg_978 + mul_ln28_11_reg_1038);

assign add_ln28_12_fu_702_p2 = (AB_q1 + mul_ln28_12_reg_1043);

assign add_ln28_13_fu_707_p2 = (AB_q0 + mul_ln28_13_reg_1048);

assign add_ln28_14_fu_712_p2 = (AB_q1 + mul_ln28_14_reg_1053);

assign add_ln28_15_fu_717_p2 = (AB_q0 + mul_ln28_15_reg_1058);

assign add_ln28_1_fu_556_p2 = (reg_364 + mul_ln28_1_reg_932);

assign add_ln28_2_fu_565_p2 = (reg_369 + mul_ln28_2_reg_958);

assign add_ln28_3_fu_574_p2 = (AB_load_3_reg_886 + mul_ln28_3_reg_973);

assign add_ln28_4_fu_582_p2 = (AB_load_4_reg_906 + mul_ln28_4_reg_988);

assign add_ln28_5_fu_590_p2 = (AB_load_5_reg_911 + mul_ln28_5_reg_998);

assign add_ln28_6_fu_598_p2 = (reg_360 + mul_ln28_6_reg_1008);

assign add_ln28_7_fu_607_p2 = (AB_load_7_reg_937 + mul_ln28_7_reg_1018);

assign add_ln28_8_fu_616_p2 = (reg_364 + mul_ln28_8_reg_1023);

assign add_ln28_9_fu_626_p2 = (AB_load_9_reg_963 + mul_ln28_9_reg_1028);

assign add_ln28_fu_527_p2 = (reg_360 + mul_ln28_reg_901);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage11_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage12_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage13_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage14_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage15_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage15;

assign empty_fu_381_p1 = ap_sig_allocacmp_i_1[3:0];

assign icmp_ln26_fu_385_p2 = ((ap_sig_allocacmp_i_1 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln28_10_fu_546_p2 = (tmp_s_reg_818 | 8'd11);

assign or_ln28_11_fu_662_p2 = (tmp_s_reg_818_pp0_iter1_reg | 8'd12);

assign or_ln28_12_fu_672_p2 = (tmp_s_reg_818_pp0_iter1_reg | 8'd13);

assign or_ln28_13_fu_682_p2 = (tmp_s_reg_818_pp0_iter1_reg | 8'd14);

assign or_ln28_14_fu_692_p2 = (tmp_s_reg_818_pp0_iter1_reg | 8'd15);

assign or_ln28_1_fu_439_p2 = (tmp_s_reg_818 | 8'd2);

assign or_ln28_2_fu_449_p2 = (tmp_s_reg_818 | 8'd3);

assign or_ln28_3_fu_459_p2 = (tmp_s_reg_818 | 8'd4);

assign or_ln28_4_fu_469_p2 = (tmp_s_reg_818 | 8'd5);

assign or_ln28_5_fu_483_p2 = (tmp_s_reg_818 | 8'd6);

assign or_ln28_6_fu_493_p2 = (tmp_s_reg_818 | 8'd7);

assign or_ln28_7_fu_507_p2 = (tmp_s_reg_818 | 8'd8);

assign or_ln28_8_fu_517_p2 = (tmp_s_reg_818 | 8'd9);

assign or_ln28_9_fu_536_p2 = (tmp_s_reg_818 | 8'd10);

assign or_ln28_fu_423_p2 = (tmp_s_fu_410_p3 | 8'd1);

assign p_cast_fu_405_p1 = tmp_fu_397_p3;

assign tmp_fu_397_p3 = {{empty_fu_381_p1}, {zext_ln23}};

assign tmp_s_fu_410_p3 = {{empty_fu_381_p1}, {4'd0}};

assign zext_ln28_10_fu_541_p1 = or_ln28_9_fu_536_p2;

assign zext_ln28_11_fu_551_p1 = or_ln28_10_fu_546_p2;

assign zext_ln28_12_fu_667_p1 = or_ln28_11_fu_662_p2;

assign zext_ln28_13_fu_677_p1 = or_ln28_12_fu_672_p2;

assign zext_ln28_14_fu_687_p1 = or_ln28_13_fu_682_p2;

assign zext_ln28_15_fu_697_p1 = or_ln28_14_fu_692_p2;

assign zext_ln28_1_fu_429_p1 = or_ln28_fu_423_p2;

assign zext_ln28_2_fu_444_p1 = or_ln28_1_fu_439_p2;

assign zext_ln28_3_fu_454_p1 = or_ln28_2_fu_449_p2;

assign zext_ln28_4_fu_464_p1 = or_ln28_3_fu_459_p2;

assign zext_ln28_5_fu_474_p1 = or_ln28_4_fu_469_p2;

assign zext_ln28_6_fu_488_p1 = or_ln28_5_fu_483_p2;

assign zext_ln28_7_fu_498_p1 = or_ln28_6_fu_493_p2;

assign zext_ln28_8_fu_512_p1 = or_ln28_7_fu_507_p2;

assign zext_ln28_9_fu_522_p1 = or_ln28_8_fu_517_p2;

assign zext_ln28_fu_418_p1 = tmp_s_fu_410_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_818[3:0] <= 4'b0000;
    tmp_s_reg_818_pp0_iter1_reg[3:0] <= 4'b0000;
    AB_addr_reg_836[3:0] <= 4'b0000;
    AB_addr_1_reg_841[3:0] <= 4'b0001;
    AB_addr_2_reg_846[3:0] <= 4'b0010;
    AB_addr_3_reg_851[3:0] <= 4'b0011;
    AB_addr_4_reg_876[3:0] <= 4'b0100;
    AB_addr_5_reg_881[3:0] <= 4'b0101;
    AB_addr_6_reg_891[3:0] <= 4'b0110;
    AB_addr_7_reg_896[3:0] <= 4'b0111;
    AB_addr_8_reg_916[3:0] <= 4'b1000;
    AB_addr_9_reg_921[3:0] <= 4'b1001;
    AB_addr_10_reg_942[3:0] <= 4'b1010;
    AB_addr_11_reg_947[3:0] <= 4'b1011;
    AB_addr_12_reg_1063[3:0] <= 4'b1100;
    AB_addr_13_reg_1069[3:0] <= 4'b1101;
    AB_addr_14_reg_1074[3:0] <= 4'b1110;
    AB_addr_15_reg_1080[3:0] <= 4'b1111;
end

endmodule //blockmatmul_blockmatmul_Pipeline_ps_i
