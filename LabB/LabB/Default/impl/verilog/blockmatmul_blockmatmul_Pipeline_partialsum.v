// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module blockmatmul_blockmatmul_Pipeline_partialsum (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0,
        AB_q0,
        AB_address1,
        AB_ce1,
        AB_we1,
        AB_d1,
        AB_q1,
        Bcols_dout,
        Bcols_empty_n,
        Bcols_read,
        A_0_address0,
        A_0_ce0,
        A_0_q0,
        A_1_address0,
        A_1_ce0,
        A_1_q0,
        A_2_address0,
        A_2_ce0,
        A_2_q0,
        A_3_address0,
        A_3_ce0,
        A_3_q0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] AB_address0;
output   AB_ce0;
output   AB_we0;
output  [31:0] AB_d0;
input  [31:0] AB_q0;
output  [3:0] AB_address1;
output   AB_ce1;
output   AB_we1;
output  [31:0] AB_d1;
input  [31:0] AB_q1;
input  [127:0] Bcols_dout;
input   Bcols_empty_n;
output   Bcols_read;
output  [2:0] A_0_address0;
output   A_0_ce0;
input  [31:0] A_0_q0;
output  [2:0] A_1_address0;
output   A_1_ce0;
input  [31:0] A_1_q0;
output  [2:0] A_2_address0;
output   A_2_ce0;
input  [31:0] A_2_q0;
output  [2:0] A_3_address0;
output   A_3_ce0;
input  [31:0] A_3_q0;

reg ap_idle;
reg[3:0] AB_address0;
reg AB_ce0;
reg AB_we0;
reg[31:0] AB_d0;
reg[3:0] AB_address1;
reg AB_ce1;
reg AB_we1;
reg[31:0] AB_d1;
reg Bcols_read;
reg A_0_ce0;
reg A_1_ce0;
reg A_2_ce0;
reg A_3_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln23_fu_321_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state16;
wire    ap_block_state16_pp0_stage15_iter0;
reg    Bcols_blk_n;
wire    ap_CS_fsm_state2;
reg   [31:0] reg_289;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
reg   [31:0] reg_293;
reg   [31:0] reg_297;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_CS_fsm_state9;
wire    ap_block_state9_pp0_stage8_iter0;
reg   [31:0] reg_301;
reg   [31:0] reg_305;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
reg   [31:0] reg_309;
wire   [3:0] AB_addr_14_reg_601;
wire   [3:0] AB_addr_15_reg_606;
wire  signed [31:0] trunc_ln145_fu_346_p1;
reg  signed [31:0] trunc_ln145_reg_634;
reg  signed [31:0] tmp_2_reg_642;
reg  signed [31:0] trunc_ln145_6_reg_650;
reg  signed [31:0] trunc_ln145_7_reg_658;
reg  signed [31:0] A_0_load_reg_666;
reg  signed [31:0] A_1_load_reg_674;
reg  signed [31:0] A_2_load_reg_682;
reg  signed [31:0] A_3_load_reg_690;
wire   [31:0] grp_fu_380_p2;
reg   [31:0] mul_ln28_reg_698;
wire   [31:0] grp_fu_384_p2;
reg   [31:0] mul_ln28_1_reg_703;
wire   [31:0] add_ln28_fu_396_p2;
reg   [31:0] add_ln28_reg_708;
wire   [31:0] add_ln28_1_fu_401_p2;
reg   [31:0] add_ln28_1_reg_713;
wire   [31:0] grp_fu_388_p2;
reg   [31:0] mul_ln28_2_reg_718;
wire   [31:0] grp_fu_392_p2;
reg   [31:0] mul_ln28_3_reg_723;
wire   [31:0] add_ln28_2_fu_414_p2;
reg   [31:0] add_ln28_2_reg_728;
wire   [31:0] add_ln28_3_fu_419_p2;
reg   [31:0] add_ln28_3_reg_733;
wire   [31:0] grp_fu_406_p2;
reg   [31:0] mul_ln28_4_reg_738;
wire   [31:0] grp_fu_410_p2;
reg   [31:0] mul_ln28_5_reg_743;
wire   [31:0] add_ln28_4_fu_432_p2;
reg   [31:0] add_ln28_4_reg_748;
wire   [31:0] add_ln28_5_fu_437_p2;
reg   [31:0] add_ln28_5_reg_753;
wire   [31:0] grp_fu_424_p2;
reg   [31:0] mul_ln28_6_reg_758;
wire   [31:0] grp_fu_428_p2;
reg   [31:0] mul_ln28_7_reg_763;
wire   [31:0] add_ln28_6_fu_450_p2;
reg   [31:0] add_ln28_6_reg_768;
wire   [31:0] add_ln28_7_fu_455_p2;
reg   [31:0] add_ln28_7_reg_773;
wire   [31:0] grp_fu_442_p2;
reg   [31:0] mul_ln28_8_reg_778;
wire   [31:0] grp_fu_446_p2;
reg   [31:0] mul_ln28_9_reg_783;
wire   [31:0] add_ln28_8_fu_468_p2;
reg   [31:0] add_ln28_8_reg_788;
wire   [31:0] add_ln28_9_fu_473_p2;
reg   [31:0] add_ln28_9_reg_793;
wire   [31:0] grp_fu_460_p2;
reg   [31:0] mul_ln28_10_reg_798;
wire   [31:0] grp_fu_464_p2;
reg   [31:0] mul_ln28_11_reg_803;
wire   [31:0] add_ln28_10_fu_486_p2;
reg   [31:0] add_ln28_10_reg_808;
wire    ap_CS_fsm_state10;
wire    ap_block_state10_pp0_stage9_iter0;
wire   [31:0] add_ln28_11_fu_491_p2;
reg   [31:0] add_ln28_11_reg_813;
wire   [31:0] grp_fu_478_p2;
reg   [31:0] mul_ln28_12_reg_818;
wire   [31:0] grp_fu_482_p2;
reg   [31:0] mul_ln28_13_reg_823;
wire   [31:0] add_ln28_12_fu_504_p2;
reg   [31:0] add_ln28_12_reg_828;
wire    ap_CS_fsm_state11;
wire    ap_block_state11_pp0_stage10_iter0;
wire   [31:0] add_ln28_13_fu_509_p2;
reg   [31:0] add_ln28_13_reg_833;
wire   [31:0] grp_fu_496_p2;
reg   [31:0] mul_ln28_14_reg_838;
wire   [31:0] grp_fu_500_p2;
reg   [31:0] mul_ln28_15_reg_843;
wire   [31:0] add_ln28_14_fu_514_p2;
reg   [31:0] add_ln28_14_reg_848;
wire    ap_CS_fsm_state12;
wire    ap_block_state12_pp0_stage11_iter0;
wire   [31:0] add_ln28_15_fu_519_p2;
reg   [31:0] add_ln28_15_reg_853;
wire   [63:0] k_cast_fu_333_p1;
reg   [3:0] k_fu_88;
wire   [3:0] add_ln23_fu_327_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_k_1;
wire    ap_CS_fsm_state13;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_CS_fsm_state14;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_CS_fsm_state15;
wire    ap_block_state15_pp0_stage14_iter0;
reg    grp_fu_380_ce;
reg    grp_fu_384_ce;
reg    grp_fu_388_ce;
reg    grp_fu_392_ce;
reg    grp_fu_406_ce;
reg    grp_fu_410_ce;
reg    grp_fu_424_ce;
reg    grp_fu_428_ce;
reg    grp_fu_442_ce;
reg    grp_fu_446_ce;
reg    grp_fu_460_ce;
reg    grp_fu_464_ce;
reg    grp_fu_478_ce;
reg    grp_fu_482_ce;
reg    grp_fu_496_ce;
reg    grp_fu_500_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_done_reg = 1'b0;
end

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_0_load_reg_666),
    .din1(trunc_ln145_reg_634),
    .ce(grp_fu_380_ce),
    .dout(grp_fu_380_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_0_load_reg_666),
    .din1(tmp_2_reg_642),
    .ce(grp_fu_384_ce),
    .dout(grp_fu_384_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_0_load_reg_666),
    .din1(trunc_ln145_6_reg_650),
    .ce(grp_fu_388_ce),
    .dout(grp_fu_388_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_0_load_reg_666),
    .din1(trunc_ln145_7_reg_658),
    .ce(grp_fu_392_ce),
    .dout(grp_fu_392_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_1_load_reg_674),
    .din1(trunc_ln145_reg_634),
    .ce(grp_fu_406_ce),
    .dout(grp_fu_406_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_1_load_reg_674),
    .din1(tmp_2_reg_642),
    .ce(grp_fu_410_ce),
    .dout(grp_fu_410_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_1_load_reg_674),
    .din1(trunc_ln145_6_reg_650),
    .ce(grp_fu_424_ce),
    .dout(grp_fu_424_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_1_load_reg_674),
    .din1(trunc_ln145_7_reg_658),
    .ce(grp_fu_428_ce),
    .dout(grp_fu_428_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_2_load_reg_682),
    .din1(trunc_ln145_reg_634),
    .ce(grp_fu_442_ce),
    .dout(grp_fu_442_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_2_load_reg_682),
    .din1(tmp_2_reg_642),
    .ce(grp_fu_446_ce),
    .dout(grp_fu_446_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_2_load_reg_682),
    .din1(trunc_ln145_6_reg_650),
    .ce(grp_fu_460_ce),
    .dout(grp_fu_460_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_2_load_reg_682),
    .din1(trunc_ln145_7_reg_658),
    .ce(grp_fu_464_ce),
    .dout(grp_fu_464_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_3_load_reg_690),
    .din1(trunc_ln145_reg_634),
    .ce(grp_fu_478_ce),
    .dout(grp_fu_478_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_3_load_reg_690),
    .din1(tmp_2_reg_642),
    .ce(grp_fu_482_ce),
    .dout(grp_fu_482_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_3_load_reg_690),
    .din1(trunc_ln145_6_reg_650),
    .ce(grp_fu_496_ce),
    .dout(grp_fu_496_p2)
);

blockmatmul_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_3_load_reg_690),
    .din1(trunc_ln145_7_reg_658),
    .ce(grp_fu_500_ce),
    .dout(grp_fu_500_p2)
);

blockmatmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln23_fu_321_p2 == 1'd0)) begin
            k_fu_88 <= add_ln23_fu_327_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_88 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == Bcols_empty_n))) begin
        A_0_load_reg_666 <= A_0_q0;
        A_1_load_reg_674 <= A_1_q0;
        A_2_load_reg_682 <= A_2_q0;
        A_3_load_reg_690 <= A_3_q0;
        tmp_2_reg_642 <= {{Bcols_dout[63:32]}};
        trunc_ln145_6_reg_650 <= {{Bcols_dout[95:64]}};
        trunc_ln145_7_reg_658 <= {{Bcols_dout[127:96]}};
        trunc_ln145_reg_634 <= trunc_ln145_fu_346_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln28_10_reg_808 <= add_ln28_10_fu_486_p2;
        add_ln28_11_reg_813 <= add_ln28_11_fu_491_p2;
        mul_ln28_12_reg_818 <= grp_fu_478_p2;
        mul_ln28_13_reg_823 <= grp_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln28_12_reg_828 <= add_ln28_12_fu_504_p2;
        add_ln28_13_reg_833 <= add_ln28_13_fu_509_p2;
        mul_ln28_14_reg_838 <= grp_fu_496_p2;
        mul_ln28_15_reg_843 <= grp_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln28_14_reg_848 <= add_ln28_14_fu_514_p2;
        add_ln28_15_reg_853 <= add_ln28_15_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln28_1_reg_713 <= add_ln28_1_fu_401_p2;
        add_ln28_reg_708 <= add_ln28_fu_396_p2;
        mul_ln28_2_reg_718 <= grp_fu_388_p2;
        mul_ln28_3_reg_723 <= grp_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln28_2_reg_728 <= add_ln28_2_fu_414_p2;
        add_ln28_3_reg_733 <= add_ln28_3_fu_419_p2;
        mul_ln28_4_reg_738 <= grp_fu_406_p2;
        mul_ln28_5_reg_743 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln28_4_reg_748 <= add_ln28_4_fu_432_p2;
        add_ln28_5_reg_753 <= add_ln28_5_fu_437_p2;
        mul_ln28_6_reg_758 <= grp_fu_424_p2;
        mul_ln28_7_reg_763 <= grp_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln28_6_reg_768 <= add_ln28_6_fu_450_p2;
        add_ln28_7_reg_773 <= add_ln28_7_fu_455_p2;
        mul_ln28_8_reg_778 <= grp_fu_442_p2;
        mul_ln28_9_reg_783 <= grp_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln28_8_reg_788 <= add_ln28_8_fu_468_p2;
        add_ln28_9_reg_793 <= add_ln28_9_fu_473_p2;
        mul_ln28_10_reg_798 <= grp_fu_460_p2;
        mul_ln28_11_reg_803 <= grp_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln28_1_reg_703 <= grp_fu_384_p2;
        mul_ln28_reg_698 <= grp_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == Bcols_empty_n)))) begin
        reg_289 <= AB_q1;
        reg_293 <= AB_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_297 <= AB_q1;
        reg_301 <= AB_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_305 <= AB_q1;
        reg_309 <= AB_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        AB_address0 = AB_addr_14_reg_601;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8))) begin
        AB_address0 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7))) begin
        AB_address0 = 64'd13;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state6))) begin
        AB_address0 = 64'd11;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        AB_address0 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        AB_address0 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3))) begin
        AB_address0 = 64'd5;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10))) begin
        AB_address0 = 64'd3;
    end else if (((icmp_ln23_fu_321_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_address0 = 64'd1;
    end else begin
        AB_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        AB_address1 = AB_addr_15_reg_606;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8))) begin
        AB_address1 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7))) begin
        AB_address1 = 64'd12;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state6))) begin
        AB_address1 = 64'd10;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        AB_address1 = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        AB_address1 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3))) begin
        AB_address1 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10))) begin
        AB_address1 = 64'd2;
    end else if (((icmp_ln23_fu_321_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        AB_address1 = 64'd0;
    end else begin
        AB_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == Bcols_empty_n)) | ((ap_start_int == 1'b1) & (icmp_ln23_fu_321_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == Bcols_empty_n)) | ((ap_start_int == 1'b1) & (icmp_ln23_fu_321_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        AB_ce1 = 1'b1;
    end else begin
        AB_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        AB_d0 = add_ln28_15_reg_853;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        AB_d0 = add_ln28_13_reg_833;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        AB_d0 = add_ln28_11_reg_813;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        AB_d0 = add_ln28_9_reg_793;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        AB_d0 = add_ln28_7_reg_773;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        AB_d0 = add_ln28_5_reg_753;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        AB_d0 = add_ln28_3_reg_733;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        AB_d0 = add_ln28_1_reg_713;
    end else begin
        AB_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        AB_d1 = add_ln28_14_reg_848;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        AB_d1 = add_ln28_12_reg_828;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        AB_d1 = add_ln28_10_reg_808;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        AB_d1 = add_ln28_8_reg_788;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        AB_d1 = add_ln28_6_reg_768;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        AB_d1 = add_ln28_4_reg_748;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        AB_d1 = add_ln28_2_reg_728;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        AB_d1 = add_ln28_reg_708;
    end else begin
        AB_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        AB_we1 = 1'b1;
    end else begin
        AB_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        A_0_ce0 = 1'b1;
    end else begin
        A_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        A_1_ce0 = 1'b1;
    end else begin
        A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        A_2_ce0 = 1'b1;
    end else begin
        A_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        A_3_ce0 = 1'b1;
    end else begin
        A_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Bcols_blk_n = Bcols_empty_n;
    end else begin
        Bcols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == Bcols_empty_n))) begin
        Bcols_read = 1'b1;
    end else begin
        Bcols_read = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == Bcols_empty_n)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln23_fu_321_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_k_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_k_1 = k_fu_88;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_fu_380_ce = 1'b1;
    end else begin
        grp_fu_380_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_fu_384_ce = 1'b1;
    end else begin
        grp_fu_384_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_388_ce = 1'b1;
    end else begin
        grp_fu_388_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_392_ce = 1'b1;
    end else begin
        grp_fu_392_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_406_ce = 1'b1;
    end else begin
        grp_fu_406_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_410_ce = 1'b1;
    end else begin
        grp_fu_410_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_424_ce = 1'b1;
    end else begin
        grp_fu_424_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_428_ce = 1'b1;
    end else begin
        grp_fu_428_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_442_ce = 1'b1;
    end else begin
        grp_fu_442_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_446_ce = 1'b1;
    end else begin
        grp_fu_446_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_460_ce = 1'b1;
    end else begin
        grp_fu_460_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_464_ce = 1'b1;
    end else begin
        grp_fu_464_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_478_ce = 1'b1;
    end else begin
        grp_fu_478_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_482_ce = 1'b1;
    end else begin
        grp_fu_482_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_496_ce = 1'b1;
    end else begin
        grp_fu_496_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_500_ce = 1'b1;
    end else begin
        grp_fu_500_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln23_fu_321_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == Bcols_empty_n))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_addr_14_reg_601 = 64'd1;

assign AB_addr_15_reg_606 = 64'd0;

assign A_0_address0 = k_cast_fu_333_p1;

assign A_1_address0 = k_cast_fu_333_p1;

assign A_2_address0 = k_cast_fu_333_p1;

assign A_3_address0 = k_cast_fu_333_p1;

assign add_ln23_fu_327_p2 = (ap_sig_allocacmp_k_1 + 4'd1);

assign add_ln28_10_fu_486_p2 = (reg_305 + mul_ln28_10_reg_798);

assign add_ln28_11_fu_491_p2 = (reg_309 + mul_ln28_11_reg_803);

assign add_ln28_12_fu_504_p2 = (reg_289 + mul_ln28_12_reg_818);

assign add_ln28_13_fu_509_p2 = (reg_293 + mul_ln28_13_reg_823);

assign add_ln28_14_fu_514_p2 = (reg_297 + mul_ln28_14_reg_838);

assign add_ln28_15_fu_519_p2 = (reg_301 + mul_ln28_15_reg_843);

assign add_ln28_1_fu_401_p2 = (reg_293 + mul_ln28_1_reg_703);

assign add_ln28_2_fu_414_p2 = (reg_297 + mul_ln28_2_reg_718);

assign add_ln28_3_fu_419_p2 = (reg_301 + mul_ln28_3_reg_723);

assign add_ln28_4_fu_432_p2 = (reg_305 + mul_ln28_4_reg_738);

assign add_ln28_5_fu_437_p2 = (reg_309 + mul_ln28_5_reg_743);

assign add_ln28_6_fu_450_p2 = (reg_289 + mul_ln28_6_reg_758);

assign add_ln28_7_fu_455_p2 = (reg_293 + mul_ln28_7_reg_763);

assign add_ln28_8_fu_468_p2 = (reg_297 + mul_ln28_8_reg_778);

assign add_ln28_9_fu_473_p2 = (reg_301 + mul_ln28_9_reg_783);

assign add_ln28_fu_396_p2 = (reg_289 + mul_ln28_reg_698);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (1'b0 == Bcols_empty_n);
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln23_fu_321_p2 = ((ap_sig_allocacmp_k_1 == 4'd8) ? 1'b1 : 1'b0);

assign k_cast_fu_333_p1 = ap_sig_allocacmp_k_1;

assign trunc_ln145_fu_346_p1 = Bcols_dout[31:0];

endmodule //blockmatmul_blockmatmul_Pipeline_partialsum
