-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blockmatmul_blockmatmul_Pipeline_partialsum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AB_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_ce0 : OUT STD_LOGIC;
    AB_we0 : OUT STD_LOGIC;
    AB_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_ce1 : OUT STD_LOGIC;
    AB_we1 : OUT STD_LOGIC;
    AB_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Bcols_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    Bcols_empty_n : IN STD_LOGIC;
    Bcols_read : OUT STD_LOGIC;
    A_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_0_ce0 : OUT STD_LOGIC;
    A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_2_ce0 : OUT STD_LOGIC;
    A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    A_3_ce0 : OUT STD_LOGIC;
    A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of blockmatmul_blockmatmul_Pipeline_partialsum is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln23_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal Bcols_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_305 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_addr_14_reg_601 : STD_LOGIC_VECTOR (3 downto 0);
    signal AB_addr_15_reg_606 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln145_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_6_reg_650 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln145_7_reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_load_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_load_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_load_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_load_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_1_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_1_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_1_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_2_reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_3_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_2_fu_414_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_2_reg_728 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_3_fu_419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_3_reg_733 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_4_reg_738 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_5_reg_743 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_4_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_4_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_5_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_5_reg_753 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_6_reg_758 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_7_reg_763 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_6_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_6_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_7_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_7_reg_773 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_8_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_9_reg_783 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_8_fu_468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_8_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_9_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_9_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_10_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_11_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_10_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_10_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal add_ln28_11_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_11_reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_12_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_13_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_12_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_12_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal add_ln28_13_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_13_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_14_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_15_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_14_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_14_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal add_ln28_15_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_15_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_cast_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_88 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln23_fu_327_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal grp_fu_380_ce : STD_LOGIC;
    signal grp_fu_384_ce : STD_LOGIC;
    signal grp_fu_388_ce : STD_LOGIC;
    signal grp_fu_392_ce : STD_LOGIC;
    signal grp_fu_406_ce : STD_LOGIC;
    signal grp_fu_410_ce : STD_LOGIC;
    signal grp_fu_424_ce : STD_LOGIC;
    signal grp_fu_428_ce : STD_LOGIC;
    signal grp_fu_442_ce : STD_LOGIC;
    signal grp_fu_446_ce : STD_LOGIC;
    signal grp_fu_460_ce : STD_LOGIC;
    signal grp_fu_464_ce : STD_LOGIC;
    signal grp_fu_478_ce : STD_LOGIC;
    signal grp_fu_482_ce : STD_LOGIC;
    signal grp_fu_496_ce : STD_LOGIC;
    signal grp_fu_500_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component blockmatmul_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blockmatmul_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_2_1_U7 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_0_load_reg_666,
        din1 => trunc_ln145_reg_634,
        ce => grp_fu_380_ce,
        dout => grp_fu_380_p2);

    mul_32s_32s_32_2_1_U8 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_0_load_reg_666,
        din1 => tmp_2_reg_642,
        ce => grp_fu_384_ce,
        dout => grp_fu_384_p2);

    mul_32s_32s_32_2_1_U9 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_0_load_reg_666,
        din1 => trunc_ln145_6_reg_650,
        ce => grp_fu_388_ce,
        dout => grp_fu_388_p2);

    mul_32s_32s_32_2_1_U10 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_0_load_reg_666,
        din1 => trunc_ln145_7_reg_658,
        ce => grp_fu_392_ce,
        dout => grp_fu_392_p2);

    mul_32s_32s_32_2_1_U11 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_1_load_reg_674,
        din1 => trunc_ln145_reg_634,
        ce => grp_fu_406_ce,
        dout => grp_fu_406_p2);

    mul_32s_32s_32_2_1_U12 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_1_load_reg_674,
        din1 => tmp_2_reg_642,
        ce => grp_fu_410_ce,
        dout => grp_fu_410_p2);

    mul_32s_32s_32_2_1_U13 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_1_load_reg_674,
        din1 => trunc_ln145_6_reg_650,
        ce => grp_fu_424_ce,
        dout => grp_fu_424_p2);

    mul_32s_32s_32_2_1_U14 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_1_load_reg_674,
        din1 => trunc_ln145_7_reg_658,
        ce => grp_fu_428_ce,
        dout => grp_fu_428_p2);

    mul_32s_32s_32_2_1_U15 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_2_load_reg_682,
        din1 => trunc_ln145_reg_634,
        ce => grp_fu_442_ce,
        dout => grp_fu_442_p2);

    mul_32s_32s_32_2_1_U16 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_2_load_reg_682,
        din1 => tmp_2_reg_642,
        ce => grp_fu_446_ce,
        dout => grp_fu_446_p2);

    mul_32s_32s_32_2_1_U17 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_2_load_reg_682,
        din1 => trunc_ln145_6_reg_650,
        ce => grp_fu_460_ce,
        dout => grp_fu_460_p2);

    mul_32s_32s_32_2_1_U18 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_2_load_reg_682,
        din1 => trunc_ln145_7_reg_658,
        ce => grp_fu_464_ce,
        dout => grp_fu_464_p2);

    mul_32s_32s_32_2_1_U19 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_3_load_reg_690,
        din1 => trunc_ln145_reg_634,
        ce => grp_fu_478_ce,
        dout => grp_fu_478_p2);

    mul_32s_32s_32_2_1_U20 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_3_load_reg_690,
        din1 => tmp_2_reg_642,
        ce => grp_fu_482_ce,
        dout => grp_fu_482_p2);

    mul_32s_32s_32_2_1_U21 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_3_load_reg_690,
        din1 => trunc_ln145_6_reg_650,
        ce => grp_fu_496_ce,
        dout => grp_fu_496_p2);

    mul_32s_32s_32_2_1_U22 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_3_load_reg_690,
        din1 => trunc_ln145_7_reg_658,
        ce => grp_fu_500_ce,
        dout => grp_fu_500_p2);

    flow_control_loop_pipe_sequential_init_U : component blockmatmul_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    k_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln23_fu_321_p2 = ap_const_lv1_0)) then 
                    k_fu_88 <= add_ln23_fu_327_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_88 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Bcols_empty_n))) then
                A_0_load_reg_666 <= A_0_q0;
                A_1_load_reg_674 <= A_1_q0;
                A_2_load_reg_682 <= A_2_q0;
                A_3_load_reg_690 <= A_3_q0;
                tmp_2_reg_642 <= Bcols_dout(63 downto 32);
                trunc_ln145_6_reg_650 <= Bcols_dout(95 downto 64);
                trunc_ln145_7_reg_658 <= Bcols_dout(127 downto 96);
                trunc_ln145_reg_634 <= trunc_ln145_fu_346_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln28_10_reg_808 <= add_ln28_10_fu_486_p2;
                add_ln28_11_reg_813 <= add_ln28_11_fu_491_p2;
                mul_ln28_12_reg_818 <= grp_fu_478_p2;
                mul_ln28_13_reg_823 <= grp_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln28_12_reg_828 <= add_ln28_12_fu_504_p2;
                add_ln28_13_reg_833 <= add_ln28_13_fu_509_p2;
                mul_ln28_14_reg_838 <= grp_fu_496_p2;
                mul_ln28_15_reg_843 <= grp_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln28_14_reg_848 <= add_ln28_14_fu_514_p2;
                add_ln28_15_reg_853 <= add_ln28_15_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln28_1_reg_713 <= add_ln28_1_fu_401_p2;
                add_ln28_reg_708 <= add_ln28_fu_396_p2;
                mul_ln28_2_reg_718 <= grp_fu_388_p2;
                mul_ln28_3_reg_723 <= grp_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln28_2_reg_728 <= add_ln28_2_fu_414_p2;
                add_ln28_3_reg_733 <= add_ln28_3_fu_419_p2;
                mul_ln28_4_reg_738 <= grp_fu_406_p2;
                mul_ln28_5_reg_743 <= grp_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln28_4_reg_748 <= add_ln28_4_fu_432_p2;
                add_ln28_5_reg_753 <= add_ln28_5_fu_437_p2;
                mul_ln28_6_reg_758 <= grp_fu_424_p2;
                mul_ln28_7_reg_763 <= grp_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln28_6_reg_768 <= add_ln28_6_fu_450_p2;
                add_ln28_7_reg_773 <= add_ln28_7_fu_455_p2;
                mul_ln28_8_reg_778 <= grp_fu_442_p2;
                mul_ln28_9_reg_783 <= grp_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln28_8_reg_788 <= add_ln28_8_fu_468_p2;
                add_ln28_9_reg_793 <= add_ln28_9_fu_473_p2;
                mul_ln28_10_reg_798 <= grp_fu_460_p2;
                mul_ln28_11_reg_803 <= grp_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln28_1_reg_703 <= grp_fu_384_p2;
                mul_ln28_reg_698 <= grp_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Bcols_empty_n)))) then
                reg_289 <= AB_q1;
                reg_293 <= AB_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_297 <= AB_q1;
                reg_301 <= AB_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_305 <= AB_q1;
                reg_309 <= AB_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln23_fu_321_p2, Bcols_empty_n, ap_CS_fsm_state2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln23_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Bcols_empty_n))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    AB_addr_14_reg_601 <= ap_const_lv64_1(4 - 1 downto 0);
    AB_addr_15_reg_606 <= ap_const_lv64_0(4 - 1 downto 0);

    AB_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_321_p2, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state7, AB_addr_14_reg_601, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            AB_address0 <= AB_addr_14_reg_601;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            AB_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            AB_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            AB_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            AB_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            AB_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            AB_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            AB_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((icmp_ln23_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            AB_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            AB_address0 <= "XXXX";
        end if; 
    end process;


    AB_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_321_p2, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state7, AB_addr_15_reg_606, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            AB_address1 <= AB_addr_15_reg_606;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            AB_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            AB_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            AB_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            AB_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            AB_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            AB_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            AB_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((icmp_ln23_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            AB_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            AB_address1 <= "XXXX";
        end if; 
    end process;


    AB_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_321_p2, ap_CS_fsm_state16, Bcols_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Bcols_empty_n)) or ((ap_start_int = ap_const_logic_1) and (icmp_ln23_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            AB_ce0 <= ap_const_logic_1;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_321_p2, ap_CS_fsm_state16, Bcols_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Bcols_empty_n)) or ((ap_start_int = ap_const_logic_1) and (icmp_ln23_fu_321_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            AB_ce1 <= ap_const_logic_1;
        else 
            AB_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    AB_d0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state9, add_ln28_1_reg_713, add_ln28_3_reg_733, add_ln28_5_reg_753, add_ln28_7_reg_773, add_ln28_9_reg_793, ap_CS_fsm_state10, add_ln28_11_reg_813, ap_CS_fsm_state11, add_ln28_13_reg_833, ap_CS_fsm_state12, add_ln28_15_reg_853, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            AB_d0 <= add_ln28_15_reg_853;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            AB_d0 <= add_ln28_13_reg_833;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_d0 <= add_ln28_11_reg_813;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            AB_d0 <= add_ln28_9_reg_793;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_d0 <= add_ln28_7_reg_773;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            AB_d0 <= add_ln28_5_reg_753;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            AB_d0 <= add_ln28_3_reg_733;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            AB_d0 <= add_ln28_1_reg_713;
        else 
            AB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    AB_d1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state9, add_ln28_reg_708, add_ln28_2_reg_728, add_ln28_4_reg_748, add_ln28_6_reg_768, add_ln28_8_reg_788, add_ln28_10_reg_808, ap_CS_fsm_state10, add_ln28_12_reg_828, ap_CS_fsm_state11, add_ln28_14_reg_848, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            AB_d1 <= add_ln28_14_reg_848;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            AB_d1 <= add_ln28_12_reg_828;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            AB_d1 <= add_ln28_10_reg_808;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            AB_d1 <= add_ln28_8_reg_788;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_d1 <= add_ln28_6_reg_768;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            AB_d1 <= add_ln28_4_reg_748;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            AB_d1 <= add_ln28_2_reg_728;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            AB_d1 <= add_ln28_reg_708;
        else 
            AB_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    AB_we0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            AB_we0 <= ap_const_logic_1;
        else 
            AB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_we1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            AB_we1 <= ap_const_logic_1;
        else 
            AB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    A_0_address0 <= k_cast_fu_333_p1(3 - 1 downto 0);

    A_0_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_0_ce0 <= ap_const_logic_1;
        else 
            A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_1_address0 <= k_cast_fu_333_p1(3 - 1 downto 0);

    A_1_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_1_ce0 <= ap_const_logic_1;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_2_address0 <= k_cast_fu_333_p1(3 - 1 downto 0);

    A_2_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_2_ce0 <= ap_const_logic_1;
        else 
            A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_3_address0 <= k_cast_fu_333_p1(3 - 1 downto 0);

    A_3_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            A_3_ce0 <= ap_const_logic_1;
        else 
            A_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Bcols_blk_n_assign_proc : process(Bcols_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Bcols_blk_n <= Bcols_empty_n;
        else 
            Bcols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Bcols_read_assign_proc : process(Bcols_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Bcols_empty_n))) then 
            Bcols_read <= ap_const_logic_1;
        else 
            Bcols_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln23_fu_327_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_1) + unsigned(ap_const_lv4_1));
    add_ln28_10_fu_486_p2 <= std_logic_vector(unsigned(reg_305) + unsigned(mul_ln28_10_reg_798));
    add_ln28_11_fu_491_p2 <= std_logic_vector(unsigned(reg_309) + unsigned(mul_ln28_11_reg_803));
    add_ln28_12_fu_504_p2 <= std_logic_vector(unsigned(reg_289) + unsigned(mul_ln28_12_reg_818));
    add_ln28_13_fu_509_p2 <= std_logic_vector(unsigned(reg_293) + unsigned(mul_ln28_13_reg_823));
    add_ln28_14_fu_514_p2 <= std_logic_vector(unsigned(reg_297) + unsigned(mul_ln28_14_reg_838));
    add_ln28_15_fu_519_p2 <= std_logic_vector(unsigned(reg_301) + unsigned(mul_ln28_15_reg_843));
    add_ln28_1_fu_401_p2 <= std_logic_vector(unsigned(reg_293) + unsigned(mul_ln28_1_reg_703));
    add_ln28_2_fu_414_p2 <= std_logic_vector(unsigned(reg_297) + unsigned(mul_ln28_2_reg_718));
    add_ln28_3_fu_419_p2 <= std_logic_vector(unsigned(reg_301) + unsigned(mul_ln28_3_reg_723));
    add_ln28_4_fu_432_p2 <= std_logic_vector(unsigned(reg_305) + unsigned(mul_ln28_4_reg_738));
    add_ln28_5_fu_437_p2 <= std_logic_vector(unsigned(reg_309) + unsigned(mul_ln28_5_reg_743));
    add_ln28_6_fu_450_p2 <= std_logic_vector(unsigned(reg_289) + unsigned(mul_ln28_6_reg_758));
    add_ln28_7_fu_455_p2 <= std_logic_vector(unsigned(reg_293) + unsigned(mul_ln28_7_reg_763));
    add_ln28_8_fu_468_p2 <= std_logic_vector(unsigned(reg_297) + unsigned(mul_ln28_8_reg_778));
    add_ln28_9_fu_473_p2 <= std_logic_vector(unsigned(reg_301) + unsigned(mul_ln28_9_reg_783));
    add_ln28_fu_396_p2 <= std_logic_vector(unsigned(reg_289) + unsigned(mul_ln28_reg_698));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(Bcols_empty_n)
    begin
        if ((ap_const_logic_0 = Bcols_empty_n)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(Bcols_empty_n)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (ap_const_logic_0 = Bcols_empty_n);
    end process;

        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln23_fu_321_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln23_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_1_assign_proc : process(ap_CS_fsm_state1, k_fu_88, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_k_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_k_1 <= k_fu_88;
        end if; 
    end process;


    grp_fu_380_ce_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_380_ce <= ap_const_logic_1;
        else 
            grp_fu_380_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_384_ce_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_384_ce <= ap_const_logic_1;
        else 
            grp_fu_384_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_388_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_388_ce <= ap_const_logic_1;
        else 
            grp_fu_388_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_392_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_392_ce <= ap_const_logic_1;
        else 
            grp_fu_392_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_406_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_406_ce <= ap_const_logic_1;
        else 
            grp_fu_406_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_410_ce_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_410_ce <= ap_const_logic_1;
        else 
            grp_fu_410_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_424_ce_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_424_ce <= ap_const_logic_1;
        else 
            grp_fu_424_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_428_ce_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_428_ce <= ap_const_logic_1;
        else 
            grp_fu_428_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_442_ce_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_442_ce <= ap_const_logic_1;
        else 
            grp_fu_442_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_446_ce_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_446_ce <= ap_const_logic_1;
        else 
            grp_fu_446_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_460_ce_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_460_ce <= ap_const_logic_1;
        else 
            grp_fu_460_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_464_ce_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_464_ce <= ap_const_logic_1;
        else 
            grp_fu_464_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_478_ce_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_478_ce <= ap_const_logic_1;
        else 
            grp_fu_478_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_482_ce_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_482_ce <= ap_const_logic_1;
        else 
            grp_fu_482_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_496_ce_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_496_ce <= ap_const_logic_1;
        else 
            grp_fu_496_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_500_ce_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_500_ce <= ap_const_logic_1;
        else 
            grp_fu_500_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln23_fu_321_p2 <= "1" when (ap_sig_allocacmp_k_1 = ap_const_lv4_8) else "0";
    k_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_1),64));
    trunc_ln145_fu_346_p1 <= Bcols_dout(32 - 1 downto 0);
end behav;
