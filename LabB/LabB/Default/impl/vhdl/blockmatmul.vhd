-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blockmatmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Arows_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    Arows_empty_n : IN STD_LOGIC;
    Arows_read : OUT STD_LOGIC;
    Bcols_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    Bcols_empty_n : IN STD_LOGIC;
    Bcols_read : OUT STD_LOGIC;
    ABpartial_i : IN STD_LOGIC_VECTOR (511 downto 0);
    ABpartial_o : OUT STD_LOGIC_VECTOR (511 downto 0);
    ABpartial_o_ap_vld : OUT STD_LOGIC;
    it : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of blockmatmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "blockmatmul_blockmatmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=180,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4925,HLS_SYN_LUT=8249,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_0_ce0 : STD_LOGIC;
    signal A_0_we0 : STD_LOGIC;
    signal A_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_1_ce0 : STD_LOGIC;
    signal A_1_we0 : STD_LOGIC;
    signal A_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_2_ce0 : STD_LOGIC;
    signal A_2_we0 : STD_LOGIC;
    signal A_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal A_3_ce0 : STD_LOGIC;
    signal A_3_we0 : STD_LOGIC;
    signal A_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln5_fu_122_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal AB_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal AB_ce0 : STD_LOGIC;
    signal AB_we0 : STD_LOGIC;
    signal AB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_ce1 : STD_LOGIC;
    signal AB_we1 : STD_LOGIC;
    signal AB_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockmatmul_Pipeline_1_fu_79_ap_start : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_1_fu_79_ap_done : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_1_fu_79_ap_idle : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_1_fu_79_ap_ready : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_1_fu_79_AB_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockmatmul_Pipeline_1_fu_79_AB_ce0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_1_fu_79_AB_we0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_1_fu_79_AB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockmatmul_Pipeline_loadA_fu_85_ap_start : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_loadA_fu_85_ap_done : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_loadA_fu_85_ap_idle : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_loadA_fu_85_ap_ready : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_loadA_fu_85_Arows_read : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_0_ce0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_0_we0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_1_ce0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_1_we0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_2_ce0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_2_we0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_3_ce0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_3_we0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_loadA_fu_85_A_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_ap_start : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_ap_done : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_ap_idle : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_ap_ready : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_AB_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_AB_ce0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_AB_we0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_AB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_AB_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_AB_ce1 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_AB_we1 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_AB_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_Bcols_read : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_A_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_A_0_ce0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_A_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_A_1_ce0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_A_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_A_2_ce0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_A_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_A_3_ce0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_start : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_done : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_idle : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_ready : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_AB_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_AB_ce0 : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_p_out : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_p_out_ap_vld : STD_LOGIC;
    signal grp_blockmatmul_Pipeline_1_fu_79_ap_start_reg : STD_LOGIC := '0';
    signal grp_blockmatmul_Pipeline_loadA_fu_85_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_blockmatmul_Pipeline_partialsum_fu_99_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component blockmatmul_blockmatmul_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AB_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_ce0 : OUT STD_LOGIC;
        AB_we0 : OUT STD_LOGIC;
        AB_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blockmatmul_blockmatmul_Pipeline_loadA IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Arows_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        Arows_empty_n : IN STD_LOGIC;
        Arows_read : OUT STD_LOGIC;
        A_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_we0 : OUT STD_LOGIC;
        A_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_we0 : OUT STD_LOGIC;
        A_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_2_ce0 : OUT STD_LOGIC;
        A_2_we0 : OUT STD_LOGIC;
        A_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_3_ce0 : OUT STD_LOGIC;
        A_3_we0 : OUT STD_LOGIC;
        A_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blockmatmul_blockmatmul_Pipeline_partialsum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AB_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_ce0 : OUT STD_LOGIC;
        AB_we0 : OUT STD_LOGIC;
        AB_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_ce1 : OUT STD_LOGIC;
        AB_we1 : OUT STD_LOGIC;
        AB_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Bcols_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        Bcols_empty_n : IN STD_LOGIC;
        Bcols_read : OUT STD_LOGIC;
        A_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_0_ce0 : OUT STD_LOGIC;
        A_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_2_ce0 : OUT STD_LOGIC;
        A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        A_3_ce0 : OUT STD_LOGIC;
        A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blockmatmul_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ABpartial_load : IN STD_LOGIC_VECTOR (511 downto 0);
        AB_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_ce0 : OUT STD_LOGIC;
        AB_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        p_out : OUT STD_LOGIC_VECTOR (511 downto 0);
        p_out_ap_vld : OUT STD_LOGIC );
    end component;


    component blockmatmul_A_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blockmatmul_AB_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    A_0_U : component blockmatmul_A_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_0_address0,
        ce0 => A_0_ce0,
        we0 => A_0_we0,
        d0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_0_d0,
        q0 => A_0_q0);

    A_1_U : component blockmatmul_A_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_1_address0,
        ce0 => A_1_ce0,
        we0 => A_1_we0,
        d0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_1_d0,
        q0 => A_1_q0);

    A_2_U : component blockmatmul_A_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_2_address0,
        ce0 => A_2_ce0,
        we0 => A_2_we0,
        d0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_2_d0,
        q0 => A_2_q0);

    A_3_U : component blockmatmul_A_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_3_address0,
        ce0 => A_3_ce0,
        we0 => A_3_we0,
        d0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_3_d0,
        q0 => A_3_q0);

    AB_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => AB_address0,
        ce0 => AB_ce0,
        we0 => AB_we0,
        d0 => AB_d0,
        q0 => AB_q0,
        address1 => grp_blockmatmul_Pipeline_partialsum_fu_99_AB_address1,
        ce1 => AB_ce1,
        we1 => AB_we1,
        d1 => grp_blockmatmul_Pipeline_partialsum_fu_99_AB_d1,
        q1 => AB_q1);

    grp_blockmatmul_Pipeline_1_fu_79 : component blockmatmul_blockmatmul_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_blockmatmul_Pipeline_1_fu_79_ap_start,
        ap_done => grp_blockmatmul_Pipeline_1_fu_79_ap_done,
        ap_idle => grp_blockmatmul_Pipeline_1_fu_79_ap_idle,
        ap_ready => grp_blockmatmul_Pipeline_1_fu_79_ap_ready,
        AB_address0 => grp_blockmatmul_Pipeline_1_fu_79_AB_address0,
        AB_ce0 => grp_blockmatmul_Pipeline_1_fu_79_AB_ce0,
        AB_we0 => grp_blockmatmul_Pipeline_1_fu_79_AB_we0,
        AB_d0 => grp_blockmatmul_Pipeline_1_fu_79_AB_d0);

    grp_blockmatmul_Pipeline_loadA_fu_85 : component blockmatmul_blockmatmul_Pipeline_loadA
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_blockmatmul_Pipeline_loadA_fu_85_ap_start,
        ap_done => grp_blockmatmul_Pipeline_loadA_fu_85_ap_done,
        ap_idle => grp_blockmatmul_Pipeline_loadA_fu_85_ap_idle,
        ap_ready => grp_blockmatmul_Pipeline_loadA_fu_85_ap_ready,
        Arows_dout => Arows_dout,
        Arows_empty_n => Arows_empty_n,
        Arows_read => grp_blockmatmul_Pipeline_loadA_fu_85_Arows_read,
        A_0_address0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_0_address0,
        A_0_ce0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_0_ce0,
        A_0_we0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_0_we0,
        A_0_d0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_0_d0,
        A_1_address0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_1_address0,
        A_1_ce0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_1_ce0,
        A_1_we0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_1_we0,
        A_1_d0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_1_d0,
        A_2_address0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_2_address0,
        A_2_ce0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_2_ce0,
        A_2_we0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_2_we0,
        A_2_d0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_2_d0,
        A_3_address0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_3_address0,
        A_3_ce0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_3_ce0,
        A_3_we0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_3_we0,
        A_3_d0 => grp_blockmatmul_Pipeline_loadA_fu_85_A_3_d0);

    grp_blockmatmul_Pipeline_partialsum_fu_99 : component blockmatmul_blockmatmul_Pipeline_partialsum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_blockmatmul_Pipeline_partialsum_fu_99_ap_start,
        ap_done => grp_blockmatmul_Pipeline_partialsum_fu_99_ap_done,
        ap_idle => grp_blockmatmul_Pipeline_partialsum_fu_99_ap_idle,
        ap_ready => grp_blockmatmul_Pipeline_partialsum_fu_99_ap_ready,
        AB_address0 => grp_blockmatmul_Pipeline_partialsum_fu_99_AB_address0,
        AB_ce0 => grp_blockmatmul_Pipeline_partialsum_fu_99_AB_ce0,
        AB_we0 => grp_blockmatmul_Pipeline_partialsum_fu_99_AB_we0,
        AB_d0 => grp_blockmatmul_Pipeline_partialsum_fu_99_AB_d0,
        AB_q0 => AB_q0,
        AB_address1 => grp_blockmatmul_Pipeline_partialsum_fu_99_AB_address1,
        AB_ce1 => grp_blockmatmul_Pipeline_partialsum_fu_99_AB_ce1,
        AB_we1 => grp_blockmatmul_Pipeline_partialsum_fu_99_AB_we1,
        AB_d1 => grp_blockmatmul_Pipeline_partialsum_fu_99_AB_d1,
        AB_q1 => AB_q1,
        Bcols_dout => Bcols_dout,
        Bcols_empty_n => Bcols_empty_n,
        Bcols_read => grp_blockmatmul_Pipeline_partialsum_fu_99_Bcols_read,
        A_0_address0 => grp_blockmatmul_Pipeline_partialsum_fu_99_A_0_address0,
        A_0_ce0 => grp_blockmatmul_Pipeline_partialsum_fu_99_A_0_ce0,
        A_0_q0 => A_0_q0,
        A_1_address0 => grp_blockmatmul_Pipeline_partialsum_fu_99_A_1_address0,
        A_1_ce0 => grp_blockmatmul_Pipeline_partialsum_fu_99_A_1_ce0,
        A_1_q0 => A_1_q0,
        A_2_address0 => grp_blockmatmul_Pipeline_partialsum_fu_99_A_2_address0,
        A_2_ce0 => grp_blockmatmul_Pipeline_partialsum_fu_99_A_2_ce0,
        A_2_q0 => A_2_q0,
        A_3_address0 => grp_blockmatmul_Pipeline_partialsum_fu_99_A_3_address0,
        A_3_ce0 => grp_blockmatmul_Pipeline_partialsum_fu_99_A_3_ce0,
        A_3_q0 => A_3_q0);

    grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114 : component blockmatmul_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_start,
        ap_done => grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_done,
        ap_idle => grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_idle,
        ap_ready => grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_ready,
        ABpartial_load => ABpartial_i,
        AB_address0 => grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_AB_address0,
        AB_ce0 => grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_AB_ce0,
        AB_q0 => AB_q0,
        p_out => grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_p_out,
        p_out_ap_vld => grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_p_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_blockmatmul_Pipeline_1_fu_79_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_blockmatmul_Pipeline_1_fu_79_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_blockmatmul_Pipeline_1_fu_79_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_blockmatmul_Pipeline_1_fu_79_ap_ready = ap_const_logic_1)) then 
                    grp_blockmatmul_Pipeline_1_fu_79_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_blockmatmul_Pipeline_loadA_fu_85_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_blockmatmul_Pipeline_loadA_fu_85_ap_start_reg <= ap_const_logic_0;
            else
                if (((trunc_ln5_fu_122_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_blockmatmul_Pipeline_1_fu_79_ap_done = ap_const_logic_1))) then 
                    grp_blockmatmul_Pipeline_loadA_fu_85_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_blockmatmul_Pipeline_loadA_fu_85_ap_ready = ap_const_logic_1)) then 
                    grp_blockmatmul_Pipeline_loadA_fu_85_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_blockmatmul_Pipeline_partialsum_fu_99_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_blockmatmul_Pipeline_partialsum_fu_99_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_blockmatmul_Pipeline_partialsum_fu_99_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_blockmatmul_Pipeline_partialsum_fu_99_ap_ready = ap_const_logic_1)) then 
                    grp_blockmatmul_Pipeline_partialsum_fu_99_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_ready = ap_const_logic_1)) then 
                    grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, trunc_ln5_fu_122_p1, ap_CS_fsm_state2, grp_blockmatmul_Pipeline_1_fu_79_ap_done, grp_blockmatmul_Pipeline_loadA_fu_85_ap_done, grp_blockmatmul_Pipeline_partialsum_fu_99_ap_done, grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((trunc_ln5_fu_122_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_blockmatmul_Pipeline_1_fu_79_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((trunc_ln5_fu_122_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_blockmatmul_Pipeline_1_fu_79_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_blockmatmul_Pipeline_loadA_fu_85_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_blockmatmul_Pipeline_partialsum_fu_99_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    AB_address0_assign_proc : process(ap_CS_fsm_state2, grp_blockmatmul_Pipeline_1_fu_79_AB_address0, grp_blockmatmul_Pipeline_partialsum_fu_99_AB_address0, grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_AB_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            AB_address0 <= grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_AB_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            AB_address0 <= grp_blockmatmul_Pipeline_partialsum_fu_99_AB_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            AB_address0 <= grp_blockmatmul_Pipeline_1_fu_79_AB_address0;
        else 
            AB_address0 <= "XXXX";
        end if; 
    end process;


    AB_ce0_assign_proc : process(ap_CS_fsm_state2, grp_blockmatmul_Pipeline_1_fu_79_AB_ce0, grp_blockmatmul_Pipeline_partialsum_fu_99_AB_ce0, grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_AB_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            AB_ce0 <= grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_AB_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            AB_ce0 <= grp_blockmatmul_Pipeline_partialsum_fu_99_AB_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            AB_ce0 <= grp_blockmatmul_Pipeline_1_fu_79_AB_ce0;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_ce1_assign_proc : process(grp_blockmatmul_Pipeline_partialsum_fu_99_AB_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            AB_ce1 <= grp_blockmatmul_Pipeline_partialsum_fu_99_AB_ce1;
        else 
            AB_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    AB_d0_assign_proc : process(ap_CS_fsm_state2, grp_blockmatmul_Pipeline_1_fu_79_AB_d0, grp_blockmatmul_Pipeline_partialsum_fu_99_AB_d0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            AB_d0 <= grp_blockmatmul_Pipeline_partialsum_fu_99_AB_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            AB_d0 <= grp_blockmatmul_Pipeline_1_fu_79_AB_d0;
        else 
            AB_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    AB_we0_assign_proc : process(ap_CS_fsm_state2, grp_blockmatmul_Pipeline_1_fu_79_AB_we0, grp_blockmatmul_Pipeline_partialsum_fu_99_AB_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            AB_we0 <= grp_blockmatmul_Pipeline_partialsum_fu_99_AB_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            AB_we0 <= grp_blockmatmul_Pipeline_1_fu_79_AB_we0;
        else 
            AB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_we1_assign_proc : process(grp_blockmatmul_Pipeline_partialsum_fu_99_AB_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            AB_we1 <= grp_blockmatmul_Pipeline_partialsum_fu_99_AB_we1;
        else 
            AB_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ABpartial_o <= grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_p_out;

    ABpartial_o_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ABpartial_o_ap_vld <= ap_const_logic_1;
        else 
            ABpartial_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    A_0_address0_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_A_0_address0, grp_blockmatmul_Pipeline_partialsum_fu_99_A_0_address0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_0_address0 <= grp_blockmatmul_Pipeline_partialsum_fu_99_A_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_0_address0 <= grp_blockmatmul_Pipeline_loadA_fu_85_A_0_address0;
        else 
            A_0_address0 <= "XXX";
        end if; 
    end process;


    A_0_ce0_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_A_0_ce0, grp_blockmatmul_Pipeline_partialsum_fu_99_A_0_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_0_ce0 <= grp_blockmatmul_Pipeline_partialsum_fu_99_A_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_0_ce0 <= grp_blockmatmul_Pipeline_loadA_fu_85_A_0_ce0;
        else 
            A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_0_we0_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_A_0_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_0_we0 <= grp_blockmatmul_Pipeline_loadA_fu_85_A_0_we0;
        else 
            A_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_address0_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_A_1_address0, grp_blockmatmul_Pipeline_partialsum_fu_99_A_1_address0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_1_address0 <= grp_blockmatmul_Pipeline_partialsum_fu_99_A_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_1_address0 <= grp_blockmatmul_Pipeline_loadA_fu_85_A_1_address0;
        else 
            A_1_address0 <= "XXX";
        end if; 
    end process;


    A_1_ce0_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_A_1_ce0, grp_blockmatmul_Pipeline_partialsum_fu_99_A_1_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_1_ce0 <= grp_blockmatmul_Pipeline_partialsum_fu_99_A_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_1_ce0 <= grp_blockmatmul_Pipeline_loadA_fu_85_A_1_ce0;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_we0_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_A_1_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_1_we0 <= grp_blockmatmul_Pipeline_loadA_fu_85_A_1_we0;
        else 
            A_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_address0_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_A_2_address0, grp_blockmatmul_Pipeline_partialsum_fu_99_A_2_address0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_2_address0 <= grp_blockmatmul_Pipeline_partialsum_fu_99_A_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_2_address0 <= grp_blockmatmul_Pipeline_loadA_fu_85_A_2_address0;
        else 
            A_2_address0 <= "XXX";
        end if; 
    end process;


    A_2_ce0_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_A_2_ce0, grp_blockmatmul_Pipeline_partialsum_fu_99_A_2_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_2_ce0 <= grp_blockmatmul_Pipeline_partialsum_fu_99_A_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_2_ce0 <= grp_blockmatmul_Pipeline_loadA_fu_85_A_2_ce0;
        else 
            A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_we0_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_A_2_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_2_we0 <= grp_blockmatmul_Pipeline_loadA_fu_85_A_2_we0;
        else 
            A_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_3_address0_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_A_3_address0, grp_blockmatmul_Pipeline_partialsum_fu_99_A_3_address0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_3_address0 <= grp_blockmatmul_Pipeline_partialsum_fu_99_A_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_3_address0 <= grp_blockmatmul_Pipeline_loadA_fu_85_A_3_address0;
        else 
            A_3_address0 <= "XXX";
        end if; 
    end process;


    A_3_ce0_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_A_3_ce0, grp_blockmatmul_Pipeline_partialsum_fu_99_A_3_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_3_ce0 <= grp_blockmatmul_Pipeline_partialsum_fu_99_A_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_3_ce0 <= grp_blockmatmul_Pipeline_loadA_fu_85_A_3_ce0;
        else 
            A_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_3_we0_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_A_3_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_3_we0 <= grp_blockmatmul_Pipeline_loadA_fu_85_A_3_we0;
        else 
            A_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Arows_read_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_Arows_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Arows_read <= grp_blockmatmul_Pipeline_loadA_fu_85_Arows_read;
        else 
            Arows_read <= ap_const_logic_0;
        end if; 
    end process;


    Bcols_read_assign_proc : process(grp_blockmatmul_Pipeline_partialsum_fu_99_Bcols_read, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Bcols_read <= grp_blockmatmul_Pipeline_partialsum_fu_99_Bcols_read;
        else 
            Bcols_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_blockmatmul_Pipeline_1_fu_79_ap_done)
    begin
        if ((grp_blockmatmul_Pipeline_1_fu_79_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(grp_blockmatmul_Pipeline_loadA_fu_85_ap_done)
    begin
        if ((grp_blockmatmul_Pipeline_loadA_fu_85_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_blockmatmul_Pipeline_partialsum_fu_99_ap_done)
    begin
        if ((grp_blockmatmul_Pipeline_partialsum_fu_99_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_done)
    begin
        if ((grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_blockmatmul_Pipeline_1_fu_79_ap_start <= grp_blockmatmul_Pipeline_1_fu_79_ap_start_reg;
    grp_blockmatmul_Pipeline_loadA_fu_85_ap_start <= grp_blockmatmul_Pipeline_loadA_fu_85_ap_start_reg;
    grp_blockmatmul_Pipeline_partialsum_fu_99_ap_start <= grp_blockmatmul_Pipeline_partialsum_fu_99_ap_start_reg;
    grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_start <= grp_blockmatmul_Pipeline_writeoutput_VITIS_LOOP_34_2_fu_114_ap_start_reg;
    trunc_ln5_fu_122_p1 <= it(1 - 1 downto 0);
end behav;
