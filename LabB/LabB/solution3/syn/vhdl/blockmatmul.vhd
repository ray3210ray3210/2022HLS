-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blockmatmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    Arows_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    Arows_empty_n : IN STD_LOGIC;
    Arows_read : OUT STD_LOGIC;
    Bcols_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    Bcols_empty_n : IN STD_LOGIC;
    Bcols_read : OUT STD_LOGIC;
    ABpartial_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ABpartial_ce0 : OUT STD_LOGIC;
    ABpartial_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ABpartial_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ABpartial_we0 : OUT STD_LOGIC;
    ABpartial_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ABpartial_ce1 : OUT STD_LOGIC;
    ABpartial_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ABpartial_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ABpartial_we1 : OUT STD_LOGIC;
    it : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of blockmatmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "blockmatmul_blockmatmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.196000,HLS_SYN_LAT=2058,HLS_SYN_TPT=2059,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=6526,HLS_SYN_LUT=3862,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal AB_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_1_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_1_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_1_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_1_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_2_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_2_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_2_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_2_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_3_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_3_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_3_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_3_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_4_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_4_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_4_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_4_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_5_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_5_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_5_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_5_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_6_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_6_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_6_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_6_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_7_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_7_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_7_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_7_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_8_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_8_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_8_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_8_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_9_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_9_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_9_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_9_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_10_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_10_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_10_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_10_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_11_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_11_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_11_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_11_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_12_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_12_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_12_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_12_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_13_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_13_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_13_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_13_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_14_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_14_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_14_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_14_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_15_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_15_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_15_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_15_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc1_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc1_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc1_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc1_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_1_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_1_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_1_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_2_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_2_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_2_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_2_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_3_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_3_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_3_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_3_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_4_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_4_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_4_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_4_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_5_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_5_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_5_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_5_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_6_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_6_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_6_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_6_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_7_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_7_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_7_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_7_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_8_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_8_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_8_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_8_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_8_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_9_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_9_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_9_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_9_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_9_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_10_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_10_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_10_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_10_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_10_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_11_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_11_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_11_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_11_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_11_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_12_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_12_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_12_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_12_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_12_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_13_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_13_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_13_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_13_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_13_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_14_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_14_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_14_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_14_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_14_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_14_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_15_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_15_ce0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_15_we0 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_15_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_1_proc1_U0_AB_15_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_1_proc1_U0_AB_15_ce1 : STD_LOGIC;
    signal Loop_1_proc1_U0_Arows_read : STD_LOGIC;
    signal Loop_1_proc1_U0_Bcols_read : STD_LOGIC;
    signal ap_channel_done_AB_15 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_15_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_15 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_15 : STD_LOGIC;
    signal ap_channel_done_AB_14 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_14_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_14 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_14 : STD_LOGIC;
    signal ap_channel_done_AB_13 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_13_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_13 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_13 : STD_LOGIC;
    signal ap_channel_done_AB_12 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_12_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_12 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_12 : STD_LOGIC;
    signal ap_channel_done_AB_11 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_11_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_11 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_11 : STD_LOGIC;
    signal ap_channel_done_AB_10 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_10_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_10 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_10 : STD_LOGIC;
    signal ap_channel_done_AB_9 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_9_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_9 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_9 : STD_LOGIC;
    signal ap_channel_done_AB_8 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_8_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_8 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_8 : STD_LOGIC;
    signal ap_channel_done_AB_7 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_7_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_7 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_7 : STD_LOGIC;
    signal ap_channel_done_AB_6 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_6_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_6 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_6 : STD_LOGIC;
    signal ap_channel_done_AB_5 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_5_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_5 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_5 : STD_LOGIC;
    signal ap_channel_done_AB_4 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_4_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_4 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_4 : STD_LOGIC;
    signal ap_channel_done_AB_3 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_3_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_3 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_3 : STD_LOGIC;
    signal ap_channel_done_AB_2 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_2_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_2 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_2 : STD_LOGIC;
    signal ap_channel_done_AB_1 : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_1_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB_1 : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB_1 : STD_LOGIC;
    signal ap_channel_done_AB : STD_LOGIC;
    signal Loop_1_proc1_U0_AB_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_AB : STD_LOGIC := '0';
    signal ap_sync_channel_write_AB : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_ap_start : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_ap_done : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_1_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_2_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_3_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_4_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_5_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_6_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_7_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_8_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_9_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_10_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_11_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_12_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_13_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_14_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_14_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_AB_15_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_writeoutput_proc_U0_AB_15_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_ABpartial_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_writeoutput_proc_U0_ABpartial_ce0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_ABpartial_we0 : STD_LOGIC;
    signal Loop_writeoutput_proc_U0_ABpartial_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_i_full_n : STD_LOGIC;
    signal AB_t_empty_n : STD_LOGIC;
    signal AB_1_i_full_n : STD_LOGIC;
    signal AB_1_t_empty_n : STD_LOGIC;
    signal AB_2_i_full_n : STD_LOGIC;
    signal AB_2_t_empty_n : STD_LOGIC;
    signal AB_3_i_full_n : STD_LOGIC;
    signal AB_3_t_empty_n : STD_LOGIC;
    signal AB_4_i_full_n : STD_LOGIC;
    signal AB_4_t_empty_n : STD_LOGIC;
    signal AB_5_i_full_n : STD_LOGIC;
    signal AB_5_t_empty_n : STD_LOGIC;
    signal AB_6_i_full_n : STD_LOGIC;
    signal AB_6_t_empty_n : STD_LOGIC;
    signal AB_7_i_full_n : STD_LOGIC;
    signal AB_7_t_empty_n : STD_LOGIC;
    signal AB_8_i_full_n : STD_LOGIC;
    signal AB_8_t_empty_n : STD_LOGIC;
    signal AB_9_i_full_n : STD_LOGIC;
    signal AB_9_t_empty_n : STD_LOGIC;
    signal AB_10_i_full_n : STD_LOGIC;
    signal AB_10_t_empty_n : STD_LOGIC;
    signal AB_11_i_full_n : STD_LOGIC;
    signal AB_11_t_empty_n : STD_LOGIC;
    signal AB_12_i_full_n : STD_LOGIC;
    signal AB_12_t_empty_n : STD_LOGIC;
    signal AB_13_i_full_n : STD_LOGIC;
    signal AB_13_t_empty_n : STD_LOGIC;
    signal AB_14_i_full_n : STD_LOGIC;
    signal AB_14_t_empty_n : STD_LOGIC;
    signal AB_15_i_full_n : STD_LOGIC;
    signal AB_15_t_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component blockmatmul_Loop_1_proc1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AB_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_ce0 : OUT STD_LOGIC;
        AB_we0 : OUT STD_LOGIC;
        AB_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_ce1 : OUT STD_LOGIC;
        AB_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_1_ce0 : OUT STD_LOGIC;
        AB_1_we0 : OUT STD_LOGIC;
        AB_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_1_ce1 : OUT STD_LOGIC;
        AB_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_2_ce0 : OUT STD_LOGIC;
        AB_2_we0 : OUT STD_LOGIC;
        AB_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_2_ce1 : OUT STD_LOGIC;
        AB_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_3_ce0 : OUT STD_LOGIC;
        AB_3_we0 : OUT STD_LOGIC;
        AB_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_3_ce1 : OUT STD_LOGIC;
        AB_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_4_ce0 : OUT STD_LOGIC;
        AB_4_we0 : OUT STD_LOGIC;
        AB_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_4_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_4_ce1 : OUT STD_LOGIC;
        AB_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_5_ce0 : OUT STD_LOGIC;
        AB_5_we0 : OUT STD_LOGIC;
        AB_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_5_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_5_ce1 : OUT STD_LOGIC;
        AB_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_6_ce0 : OUT STD_LOGIC;
        AB_6_we0 : OUT STD_LOGIC;
        AB_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_6_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_6_ce1 : OUT STD_LOGIC;
        AB_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_7_ce0 : OUT STD_LOGIC;
        AB_7_we0 : OUT STD_LOGIC;
        AB_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_7_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_7_ce1 : OUT STD_LOGIC;
        AB_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_8_ce0 : OUT STD_LOGIC;
        AB_8_we0 : OUT STD_LOGIC;
        AB_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_8_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_8_ce1 : OUT STD_LOGIC;
        AB_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_9_ce0 : OUT STD_LOGIC;
        AB_9_we0 : OUT STD_LOGIC;
        AB_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_9_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_9_ce1 : OUT STD_LOGIC;
        AB_9_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_10_ce0 : OUT STD_LOGIC;
        AB_10_we0 : OUT STD_LOGIC;
        AB_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_10_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_10_ce1 : OUT STD_LOGIC;
        AB_10_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_11_ce0 : OUT STD_LOGIC;
        AB_11_we0 : OUT STD_LOGIC;
        AB_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_11_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_11_ce1 : OUT STD_LOGIC;
        AB_11_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_12_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_12_ce0 : OUT STD_LOGIC;
        AB_12_we0 : OUT STD_LOGIC;
        AB_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_12_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_12_ce1 : OUT STD_LOGIC;
        AB_12_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_13_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_13_ce0 : OUT STD_LOGIC;
        AB_13_we0 : OUT STD_LOGIC;
        AB_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_13_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_13_ce1 : OUT STD_LOGIC;
        AB_13_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_14_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_14_ce0 : OUT STD_LOGIC;
        AB_14_we0 : OUT STD_LOGIC;
        AB_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_14_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_14_ce1 : OUT STD_LOGIC;
        AB_14_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_15_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_15_ce0 : OUT STD_LOGIC;
        AB_15_we0 : OUT STD_LOGIC;
        AB_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        AB_15_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_15_ce1 : OUT STD_LOGIC;
        AB_15_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        it : IN STD_LOGIC_VECTOR (31 downto 0);
        Arows_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        Arows_empty_n : IN STD_LOGIC;
        Arows_read : OUT STD_LOGIC;
        Bcols_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        Bcols_empty_n : IN STD_LOGIC;
        Bcols_read : OUT STD_LOGIC );
    end component;


    component blockmatmul_Loop_writeoutput_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AB_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_ce0 : OUT STD_LOGIC;
        AB_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_1_ce0 : OUT STD_LOGIC;
        AB_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_2_ce0 : OUT STD_LOGIC;
        AB_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_3_ce0 : OUT STD_LOGIC;
        AB_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_4_ce0 : OUT STD_LOGIC;
        AB_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_5_ce0 : OUT STD_LOGIC;
        AB_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_6_ce0 : OUT STD_LOGIC;
        AB_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_7_ce0 : OUT STD_LOGIC;
        AB_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_8_ce0 : OUT STD_LOGIC;
        AB_8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_9_ce0 : OUT STD_LOGIC;
        AB_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_10_ce0 : OUT STD_LOGIC;
        AB_10_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_11_ce0 : OUT STD_LOGIC;
        AB_11_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_12_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_12_ce0 : OUT STD_LOGIC;
        AB_12_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_13_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_13_ce0 : OUT STD_LOGIC;
        AB_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_14_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_14_ce0 : OUT STD_LOGIC;
        AB_14_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        AB_15_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        AB_15_ce0 : OUT STD_LOGIC;
        AB_15_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ABpartial_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ABpartial_ce0 : OUT STD_LOGIC;
        ABpartial_we0 : OUT STD_LOGIC;
        ABpartial_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blockmatmul_AB_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;



begin
    AB_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_address0,
        i_ce0 => Loop_1_proc1_U0_AB_ce0,
        i_we0 => Loop_1_proc1_U0_AB_we0,
        i_d0 => Loop_1_proc1_U0_AB_d0,
        i_q0 => AB_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_address1,
        i_ce1 => Loop_1_proc1_U0_AB_ce1,
        i_q1 => AB_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_i_full_n,
        i_write => ap_channel_done_AB,
        t_empty_n => AB_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_1_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_1_address0,
        i_ce0 => Loop_1_proc1_U0_AB_1_ce0,
        i_we0 => Loop_1_proc1_U0_AB_1_we0,
        i_d0 => Loop_1_proc1_U0_AB_1_d0,
        i_q0 => AB_1_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_1_address1,
        i_ce1 => Loop_1_proc1_U0_AB_1_ce1,
        i_q1 => AB_1_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_1_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_1_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_1_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_1_i_full_n,
        i_write => ap_channel_done_AB_1,
        t_empty_n => AB_1_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_2_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_2_address0,
        i_ce0 => Loop_1_proc1_U0_AB_2_ce0,
        i_we0 => Loop_1_proc1_U0_AB_2_we0,
        i_d0 => Loop_1_proc1_U0_AB_2_d0,
        i_q0 => AB_2_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_2_address1,
        i_ce1 => Loop_1_proc1_U0_AB_2_ce1,
        i_q1 => AB_2_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_2_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_2_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_2_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_2_i_full_n,
        i_write => ap_channel_done_AB_2,
        t_empty_n => AB_2_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_3_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_3_address0,
        i_ce0 => Loop_1_proc1_U0_AB_3_ce0,
        i_we0 => Loop_1_proc1_U0_AB_3_we0,
        i_d0 => Loop_1_proc1_U0_AB_3_d0,
        i_q0 => AB_3_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_3_address1,
        i_ce1 => Loop_1_proc1_U0_AB_3_ce1,
        i_q1 => AB_3_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_3_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_3_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_3_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_3_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_3_i_full_n,
        i_write => ap_channel_done_AB_3,
        t_empty_n => AB_3_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_4_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_4_address0,
        i_ce0 => Loop_1_proc1_U0_AB_4_ce0,
        i_we0 => Loop_1_proc1_U0_AB_4_we0,
        i_d0 => Loop_1_proc1_U0_AB_4_d0,
        i_q0 => AB_4_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_4_address1,
        i_ce1 => Loop_1_proc1_U0_AB_4_ce1,
        i_q1 => AB_4_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_4_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_4_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_4_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_4_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_4_i_full_n,
        i_write => ap_channel_done_AB_4,
        t_empty_n => AB_4_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_5_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_5_address0,
        i_ce0 => Loop_1_proc1_U0_AB_5_ce0,
        i_we0 => Loop_1_proc1_U0_AB_5_we0,
        i_d0 => Loop_1_proc1_U0_AB_5_d0,
        i_q0 => AB_5_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_5_address1,
        i_ce1 => Loop_1_proc1_U0_AB_5_ce1,
        i_q1 => AB_5_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_5_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_5_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_5_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_5_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_5_i_full_n,
        i_write => ap_channel_done_AB_5,
        t_empty_n => AB_5_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_6_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_6_address0,
        i_ce0 => Loop_1_proc1_U0_AB_6_ce0,
        i_we0 => Loop_1_proc1_U0_AB_6_we0,
        i_d0 => Loop_1_proc1_U0_AB_6_d0,
        i_q0 => AB_6_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_6_address1,
        i_ce1 => Loop_1_proc1_U0_AB_6_ce1,
        i_q1 => AB_6_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_6_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_6_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_6_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_6_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_6_i_full_n,
        i_write => ap_channel_done_AB_6,
        t_empty_n => AB_6_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_7_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_7_address0,
        i_ce0 => Loop_1_proc1_U0_AB_7_ce0,
        i_we0 => Loop_1_proc1_U0_AB_7_we0,
        i_d0 => Loop_1_proc1_U0_AB_7_d0,
        i_q0 => AB_7_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_7_address1,
        i_ce1 => Loop_1_proc1_U0_AB_7_ce1,
        i_q1 => AB_7_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_7_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_7_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_7_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_7_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_7_i_full_n,
        i_write => ap_channel_done_AB_7,
        t_empty_n => AB_7_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_8_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_8_address0,
        i_ce0 => Loop_1_proc1_U0_AB_8_ce0,
        i_we0 => Loop_1_proc1_U0_AB_8_we0,
        i_d0 => Loop_1_proc1_U0_AB_8_d0,
        i_q0 => AB_8_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_8_address1,
        i_ce1 => Loop_1_proc1_U0_AB_8_ce1,
        i_q1 => AB_8_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_8_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_8_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_8_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_8_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_8_i_full_n,
        i_write => ap_channel_done_AB_8,
        t_empty_n => AB_8_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_9_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_9_address0,
        i_ce0 => Loop_1_proc1_U0_AB_9_ce0,
        i_we0 => Loop_1_proc1_U0_AB_9_we0,
        i_d0 => Loop_1_proc1_U0_AB_9_d0,
        i_q0 => AB_9_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_9_address1,
        i_ce1 => Loop_1_proc1_U0_AB_9_ce1,
        i_q1 => AB_9_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_9_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_9_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_9_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_9_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_9_i_full_n,
        i_write => ap_channel_done_AB_9,
        t_empty_n => AB_9_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_10_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_10_address0,
        i_ce0 => Loop_1_proc1_U0_AB_10_ce0,
        i_we0 => Loop_1_proc1_U0_AB_10_we0,
        i_d0 => Loop_1_proc1_U0_AB_10_d0,
        i_q0 => AB_10_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_10_address1,
        i_ce1 => Loop_1_proc1_U0_AB_10_ce1,
        i_q1 => AB_10_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_10_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_10_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_10_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_10_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_10_i_full_n,
        i_write => ap_channel_done_AB_10,
        t_empty_n => AB_10_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_11_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_11_address0,
        i_ce0 => Loop_1_proc1_U0_AB_11_ce0,
        i_we0 => Loop_1_proc1_U0_AB_11_we0,
        i_d0 => Loop_1_proc1_U0_AB_11_d0,
        i_q0 => AB_11_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_11_address1,
        i_ce1 => Loop_1_proc1_U0_AB_11_ce1,
        i_q1 => AB_11_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_11_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_11_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_11_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_11_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_11_i_full_n,
        i_write => ap_channel_done_AB_11,
        t_empty_n => AB_11_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_12_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_12_address0,
        i_ce0 => Loop_1_proc1_U0_AB_12_ce0,
        i_we0 => Loop_1_proc1_U0_AB_12_we0,
        i_d0 => Loop_1_proc1_U0_AB_12_d0,
        i_q0 => AB_12_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_12_address1,
        i_ce1 => Loop_1_proc1_U0_AB_12_ce1,
        i_q1 => AB_12_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_12_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_12_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_12_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_12_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_12_i_full_n,
        i_write => ap_channel_done_AB_12,
        t_empty_n => AB_12_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_13_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_13_address0,
        i_ce0 => Loop_1_proc1_U0_AB_13_ce0,
        i_we0 => Loop_1_proc1_U0_AB_13_we0,
        i_d0 => Loop_1_proc1_U0_AB_13_d0,
        i_q0 => AB_13_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_13_address1,
        i_ce1 => Loop_1_proc1_U0_AB_13_ce1,
        i_q1 => AB_13_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_13_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_13_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_13_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_13_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_13_i_full_n,
        i_write => ap_channel_done_AB_13,
        t_empty_n => AB_13_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_14_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_14_address0,
        i_ce0 => Loop_1_proc1_U0_AB_14_ce0,
        i_we0 => Loop_1_proc1_U0_AB_14_we0,
        i_d0 => Loop_1_proc1_U0_AB_14_d0,
        i_q0 => AB_14_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_14_address1,
        i_ce1 => Loop_1_proc1_U0_AB_14_ce1,
        i_q1 => AB_14_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_14_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_14_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_14_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_14_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_14_i_full_n,
        i_write => ap_channel_done_AB_14,
        t_empty_n => AB_14_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    AB_15_U : component blockmatmul_AB_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => Loop_1_proc1_U0_AB_15_address0,
        i_ce0 => Loop_1_proc1_U0_AB_15_ce0,
        i_we0 => Loop_1_proc1_U0_AB_15_we0,
        i_d0 => Loop_1_proc1_U0_AB_15_d0,
        i_q0 => AB_15_i_q0,
        i_address1 => Loop_1_proc1_U0_AB_15_address1,
        i_ce1 => Loop_1_proc1_U0_AB_15_ce1,
        i_q1 => AB_15_i_q1,
        t_address0 => Loop_writeoutput_proc_U0_AB_15_address0,
        t_ce0 => Loop_writeoutput_proc_U0_AB_15_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => AB_15_t_q0,
        t_address1 => ap_const_lv4_0,
        t_ce1 => ap_const_logic_0,
        t_q1 => AB_15_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => AB_15_i_full_n,
        i_write => ap_channel_done_AB_15,
        t_empty_n => AB_15_t_empty_n,
        t_read => Loop_writeoutput_proc_U0_ap_ready);

    Loop_1_proc1_U0 : component blockmatmul_Loop_1_proc1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_1_proc1_U0_ap_start,
        ap_done => Loop_1_proc1_U0_ap_done,
        ap_continue => Loop_1_proc1_U0_ap_continue,
        ap_idle => Loop_1_proc1_U0_ap_idle,
        ap_ready => Loop_1_proc1_U0_ap_ready,
        AB_address0 => Loop_1_proc1_U0_AB_address0,
        AB_ce0 => Loop_1_proc1_U0_AB_ce0,
        AB_we0 => Loop_1_proc1_U0_AB_we0,
        AB_d0 => Loop_1_proc1_U0_AB_d0,
        AB_address1 => Loop_1_proc1_U0_AB_address1,
        AB_ce1 => Loop_1_proc1_U0_AB_ce1,
        AB_q1 => AB_i_q1,
        AB_1_address0 => Loop_1_proc1_U0_AB_1_address0,
        AB_1_ce0 => Loop_1_proc1_U0_AB_1_ce0,
        AB_1_we0 => Loop_1_proc1_U0_AB_1_we0,
        AB_1_d0 => Loop_1_proc1_U0_AB_1_d0,
        AB_1_address1 => Loop_1_proc1_U0_AB_1_address1,
        AB_1_ce1 => Loop_1_proc1_U0_AB_1_ce1,
        AB_1_q1 => AB_1_i_q1,
        AB_2_address0 => Loop_1_proc1_U0_AB_2_address0,
        AB_2_ce0 => Loop_1_proc1_U0_AB_2_ce0,
        AB_2_we0 => Loop_1_proc1_U0_AB_2_we0,
        AB_2_d0 => Loop_1_proc1_U0_AB_2_d0,
        AB_2_address1 => Loop_1_proc1_U0_AB_2_address1,
        AB_2_ce1 => Loop_1_proc1_U0_AB_2_ce1,
        AB_2_q1 => AB_2_i_q1,
        AB_3_address0 => Loop_1_proc1_U0_AB_3_address0,
        AB_3_ce0 => Loop_1_proc1_U0_AB_3_ce0,
        AB_3_we0 => Loop_1_proc1_U0_AB_3_we0,
        AB_3_d0 => Loop_1_proc1_U0_AB_3_d0,
        AB_3_address1 => Loop_1_proc1_U0_AB_3_address1,
        AB_3_ce1 => Loop_1_proc1_U0_AB_3_ce1,
        AB_3_q1 => AB_3_i_q1,
        AB_4_address0 => Loop_1_proc1_U0_AB_4_address0,
        AB_4_ce0 => Loop_1_proc1_U0_AB_4_ce0,
        AB_4_we0 => Loop_1_proc1_U0_AB_4_we0,
        AB_4_d0 => Loop_1_proc1_U0_AB_4_d0,
        AB_4_address1 => Loop_1_proc1_U0_AB_4_address1,
        AB_4_ce1 => Loop_1_proc1_U0_AB_4_ce1,
        AB_4_q1 => AB_4_i_q1,
        AB_5_address0 => Loop_1_proc1_U0_AB_5_address0,
        AB_5_ce0 => Loop_1_proc1_U0_AB_5_ce0,
        AB_5_we0 => Loop_1_proc1_U0_AB_5_we0,
        AB_5_d0 => Loop_1_proc1_U0_AB_5_d0,
        AB_5_address1 => Loop_1_proc1_U0_AB_5_address1,
        AB_5_ce1 => Loop_1_proc1_U0_AB_5_ce1,
        AB_5_q1 => AB_5_i_q1,
        AB_6_address0 => Loop_1_proc1_U0_AB_6_address0,
        AB_6_ce0 => Loop_1_proc1_U0_AB_6_ce0,
        AB_6_we0 => Loop_1_proc1_U0_AB_6_we0,
        AB_6_d0 => Loop_1_proc1_U0_AB_6_d0,
        AB_6_address1 => Loop_1_proc1_U0_AB_6_address1,
        AB_6_ce1 => Loop_1_proc1_U0_AB_6_ce1,
        AB_6_q1 => AB_6_i_q1,
        AB_7_address0 => Loop_1_proc1_U0_AB_7_address0,
        AB_7_ce0 => Loop_1_proc1_U0_AB_7_ce0,
        AB_7_we0 => Loop_1_proc1_U0_AB_7_we0,
        AB_7_d0 => Loop_1_proc1_U0_AB_7_d0,
        AB_7_address1 => Loop_1_proc1_U0_AB_7_address1,
        AB_7_ce1 => Loop_1_proc1_U0_AB_7_ce1,
        AB_7_q1 => AB_7_i_q1,
        AB_8_address0 => Loop_1_proc1_U0_AB_8_address0,
        AB_8_ce0 => Loop_1_proc1_U0_AB_8_ce0,
        AB_8_we0 => Loop_1_proc1_U0_AB_8_we0,
        AB_8_d0 => Loop_1_proc1_U0_AB_8_d0,
        AB_8_address1 => Loop_1_proc1_U0_AB_8_address1,
        AB_8_ce1 => Loop_1_proc1_U0_AB_8_ce1,
        AB_8_q1 => AB_8_i_q1,
        AB_9_address0 => Loop_1_proc1_U0_AB_9_address0,
        AB_9_ce0 => Loop_1_proc1_U0_AB_9_ce0,
        AB_9_we0 => Loop_1_proc1_U0_AB_9_we0,
        AB_9_d0 => Loop_1_proc1_U0_AB_9_d0,
        AB_9_address1 => Loop_1_proc1_U0_AB_9_address1,
        AB_9_ce1 => Loop_1_proc1_U0_AB_9_ce1,
        AB_9_q1 => AB_9_i_q1,
        AB_10_address0 => Loop_1_proc1_U0_AB_10_address0,
        AB_10_ce0 => Loop_1_proc1_U0_AB_10_ce0,
        AB_10_we0 => Loop_1_proc1_U0_AB_10_we0,
        AB_10_d0 => Loop_1_proc1_U0_AB_10_d0,
        AB_10_address1 => Loop_1_proc1_U0_AB_10_address1,
        AB_10_ce1 => Loop_1_proc1_U0_AB_10_ce1,
        AB_10_q1 => AB_10_i_q1,
        AB_11_address0 => Loop_1_proc1_U0_AB_11_address0,
        AB_11_ce0 => Loop_1_proc1_U0_AB_11_ce0,
        AB_11_we0 => Loop_1_proc1_U0_AB_11_we0,
        AB_11_d0 => Loop_1_proc1_U0_AB_11_d0,
        AB_11_address1 => Loop_1_proc1_U0_AB_11_address1,
        AB_11_ce1 => Loop_1_proc1_U0_AB_11_ce1,
        AB_11_q1 => AB_11_i_q1,
        AB_12_address0 => Loop_1_proc1_U0_AB_12_address0,
        AB_12_ce0 => Loop_1_proc1_U0_AB_12_ce0,
        AB_12_we0 => Loop_1_proc1_U0_AB_12_we0,
        AB_12_d0 => Loop_1_proc1_U0_AB_12_d0,
        AB_12_address1 => Loop_1_proc1_U0_AB_12_address1,
        AB_12_ce1 => Loop_1_proc1_U0_AB_12_ce1,
        AB_12_q1 => AB_12_i_q1,
        AB_13_address0 => Loop_1_proc1_U0_AB_13_address0,
        AB_13_ce0 => Loop_1_proc1_U0_AB_13_ce0,
        AB_13_we0 => Loop_1_proc1_U0_AB_13_we0,
        AB_13_d0 => Loop_1_proc1_U0_AB_13_d0,
        AB_13_address1 => Loop_1_proc1_U0_AB_13_address1,
        AB_13_ce1 => Loop_1_proc1_U0_AB_13_ce1,
        AB_13_q1 => AB_13_i_q1,
        AB_14_address0 => Loop_1_proc1_U0_AB_14_address0,
        AB_14_ce0 => Loop_1_proc1_U0_AB_14_ce0,
        AB_14_we0 => Loop_1_proc1_U0_AB_14_we0,
        AB_14_d0 => Loop_1_proc1_U0_AB_14_d0,
        AB_14_address1 => Loop_1_proc1_U0_AB_14_address1,
        AB_14_ce1 => Loop_1_proc1_U0_AB_14_ce1,
        AB_14_q1 => AB_14_i_q1,
        AB_15_address0 => Loop_1_proc1_U0_AB_15_address0,
        AB_15_ce0 => Loop_1_proc1_U0_AB_15_ce0,
        AB_15_we0 => Loop_1_proc1_U0_AB_15_we0,
        AB_15_d0 => Loop_1_proc1_U0_AB_15_d0,
        AB_15_address1 => Loop_1_proc1_U0_AB_15_address1,
        AB_15_ce1 => Loop_1_proc1_U0_AB_15_ce1,
        AB_15_q1 => AB_15_i_q1,
        it => it,
        Arows_dout => Arows_dout,
        Arows_empty_n => Arows_empty_n,
        Arows_read => Loop_1_proc1_U0_Arows_read,
        Bcols_dout => Bcols_dout,
        Bcols_empty_n => Bcols_empty_n,
        Bcols_read => Loop_1_proc1_U0_Bcols_read);

    Loop_writeoutput_proc_U0 : component blockmatmul_Loop_writeoutput_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_writeoutput_proc_U0_ap_start,
        ap_done => Loop_writeoutput_proc_U0_ap_done,
        ap_continue => Loop_writeoutput_proc_U0_ap_continue,
        ap_idle => Loop_writeoutput_proc_U0_ap_idle,
        ap_ready => Loop_writeoutput_proc_U0_ap_ready,
        AB_address0 => Loop_writeoutput_proc_U0_AB_address0,
        AB_ce0 => Loop_writeoutput_proc_U0_AB_ce0,
        AB_q0 => AB_t_q0,
        AB_1_address0 => Loop_writeoutput_proc_U0_AB_1_address0,
        AB_1_ce0 => Loop_writeoutput_proc_U0_AB_1_ce0,
        AB_1_q0 => AB_1_t_q0,
        AB_2_address0 => Loop_writeoutput_proc_U0_AB_2_address0,
        AB_2_ce0 => Loop_writeoutput_proc_U0_AB_2_ce0,
        AB_2_q0 => AB_2_t_q0,
        AB_3_address0 => Loop_writeoutput_proc_U0_AB_3_address0,
        AB_3_ce0 => Loop_writeoutput_proc_U0_AB_3_ce0,
        AB_3_q0 => AB_3_t_q0,
        AB_4_address0 => Loop_writeoutput_proc_U0_AB_4_address0,
        AB_4_ce0 => Loop_writeoutput_proc_U0_AB_4_ce0,
        AB_4_q0 => AB_4_t_q0,
        AB_5_address0 => Loop_writeoutput_proc_U0_AB_5_address0,
        AB_5_ce0 => Loop_writeoutput_proc_U0_AB_5_ce0,
        AB_5_q0 => AB_5_t_q0,
        AB_6_address0 => Loop_writeoutput_proc_U0_AB_6_address0,
        AB_6_ce0 => Loop_writeoutput_proc_U0_AB_6_ce0,
        AB_6_q0 => AB_6_t_q0,
        AB_7_address0 => Loop_writeoutput_proc_U0_AB_7_address0,
        AB_7_ce0 => Loop_writeoutput_proc_U0_AB_7_ce0,
        AB_7_q0 => AB_7_t_q0,
        AB_8_address0 => Loop_writeoutput_proc_U0_AB_8_address0,
        AB_8_ce0 => Loop_writeoutput_proc_U0_AB_8_ce0,
        AB_8_q0 => AB_8_t_q0,
        AB_9_address0 => Loop_writeoutput_proc_U0_AB_9_address0,
        AB_9_ce0 => Loop_writeoutput_proc_U0_AB_9_ce0,
        AB_9_q0 => AB_9_t_q0,
        AB_10_address0 => Loop_writeoutput_proc_U0_AB_10_address0,
        AB_10_ce0 => Loop_writeoutput_proc_U0_AB_10_ce0,
        AB_10_q0 => AB_10_t_q0,
        AB_11_address0 => Loop_writeoutput_proc_U0_AB_11_address0,
        AB_11_ce0 => Loop_writeoutput_proc_U0_AB_11_ce0,
        AB_11_q0 => AB_11_t_q0,
        AB_12_address0 => Loop_writeoutput_proc_U0_AB_12_address0,
        AB_12_ce0 => Loop_writeoutput_proc_U0_AB_12_ce0,
        AB_12_q0 => AB_12_t_q0,
        AB_13_address0 => Loop_writeoutput_proc_U0_AB_13_address0,
        AB_13_ce0 => Loop_writeoutput_proc_U0_AB_13_ce0,
        AB_13_q0 => AB_13_t_q0,
        AB_14_address0 => Loop_writeoutput_proc_U0_AB_14_address0,
        AB_14_ce0 => Loop_writeoutput_proc_U0_AB_14_ce0,
        AB_14_q0 => AB_14_t_q0,
        AB_15_address0 => Loop_writeoutput_proc_U0_AB_15_address0,
        AB_15_ce0 => Loop_writeoutput_proc_U0_AB_15_ce0,
        AB_15_q0 => AB_15_t_q0,
        ABpartial_address0 => Loop_writeoutput_proc_U0_ABpartial_address0,
        ABpartial_ce0 => Loop_writeoutput_proc_U0_ABpartial_ce0,
        ABpartial_we0 => Loop_writeoutput_proc_U0_ABpartial_we0,
        ABpartial_d0 => Loop_writeoutput_proc_U0_ABpartial_d0);





    ap_sync_reg_channel_write_AB_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB <= ap_sync_channel_write_AB;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_1 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_1 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_1 <= ap_sync_channel_write_AB_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_10 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_10 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_10 <= ap_sync_channel_write_AB_10;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_11 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_11 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_11 <= ap_sync_channel_write_AB_11;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_12 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_12 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_12 <= ap_sync_channel_write_AB_12;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_13 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_13 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_13 <= ap_sync_channel_write_AB_13;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_14 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_14 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_14 <= ap_sync_channel_write_AB_14;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_15 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_15 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_15 <= ap_sync_channel_write_AB_15;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_2 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_2 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_2 <= ap_sync_channel_write_AB_2;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_3 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_3 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_3 <= ap_sync_channel_write_AB_3;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_4 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_4 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_4 <= ap_sync_channel_write_AB_4;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_5 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_5 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_5 <= ap_sync_channel_write_AB_5;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_6 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_6 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_6 <= ap_sync_channel_write_AB_6;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_7 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_7 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_7 <= ap_sync_channel_write_AB_7;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_8 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_8 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_8 <= ap_sync_channel_write_AB_8;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_AB_9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_AB_9 <= ap_const_logic_0;
            else
                if (((Loop_1_proc1_U0_ap_done and Loop_1_proc1_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_AB_9 <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_AB_9 <= ap_sync_channel_write_AB_9;
                end if; 
            end if;
        end if;
    end process;

    ABpartial_address0 <= Loop_writeoutput_proc_U0_ABpartial_address0;
    ABpartial_address1 <= ap_const_lv8_0;
    ABpartial_ce0 <= Loop_writeoutput_proc_U0_ABpartial_ce0;
    ABpartial_ce1 <= ap_const_logic_0;
    ABpartial_d0 <= Loop_writeoutput_proc_U0_ABpartial_d0;
    ABpartial_d1 <= ap_const_lv32_0;
    ABpartial_we0 <= Loop_writeoutput_proc_U0_ABpartial_we0;
    ABpartial_we1 <= ap_const_logic_0;
    Arows_read <= Loop_1_proc1_U0_Arows_read;
    Bcols_read <= Loop_1_proc1_U0_Bcols_read;
    Loop_1_proc1_U0_AB_10_full_n <= AB_10_i_full_n;
    Loop_1_proc1_U0_AB_11_full_n <= AB_11_i_full_n;
    Loop_1_proc1_U0_AB_12_full_n <= AB_12_i_full_n;
    Loop_1_proc1_U0_AB_13_full_n <= AB_13_i_full_n;
    Loop_1_proc1_U0_AB_14_full_n <= AB_14_i_full_n;
    Loop_1_proc1_U0_AB_15_full_n <= AB_15_i_full_n;
    Loop_1_proc1_U0_AB_1_full_n <= AB_1_i_full_n;
    Loop_1_proc1_U0_AB_2_full_n <= AB_2_i_full_n;
    Loop_1_proc1_U0_AB_3_full_n <= AB_3_i_full_n;
    Loop_1_proc1_U0_AB_4_full_n <= AB_4_i_full_n;
    Loop_1_proc1_U0_AB_5_full_n <= AB_5_i_full_n;
    Loop_1_proc1_U0_AB_6_full_n <= AB_6_i_full_n;
    Loop_1_proc1_U0_AB_7_full_n <= AB_7_i_full_n;
    Loop_1_proc1_U0_AB_8_full_n <= AB_8_i_full_n;
    Loop_1_proc1_U0_AB_9_full_n <= AB_9_i_full_n;
    Loop_1_proc1_U0_AB_full_n <= AB_i_full_n;
    Loop_1_proc1_U0_ap_continue <= (ap_sync_channel_write_AB_9 and ap_sync_channel_write_AB_8 and ap_sync_channel_write_AB_7 and ap_sync_channel_write_AB_6 and ap_sync_channel_write_AB_5 and ap_sync_channel_write_AB_4 and ap_sync_channel_write_AB_3 and ap_sync_channel_write_AB_2 and ap_sync_channel_write_AB_15 and ap_sync_channel_write_AB_14 and ap_sync_channel_write_AB_13 and ap_sync_channel_write_AB_12 and ap_sync_channel_write_AB_11 and ap_sync_channel_write_AB_10 and ap_sync_channel_write_AB_1 and ap_sync_channel_write_AB);
    Loop_1_proc1_U0_ap_start <= ap_start;
    Loop_writeoutput_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_writeoutput_proc_U0_ap_start <= (AB_t_empty_n and AB_9_t_empty_n and AB_8_t_empty_n and AB_7_t_empty_n and AB_6_t_empty_n and AB_5_t_empty_n and AB_4_t_empty_n and AB_3_t_empty_n and AB_2_t_empty_n and AB_1_t_empty_n and AB_15_t_empty_n and AB_14_t_empty_n and AB_13_t_empty_n and AB_12_t_empty_n and AB_11_t_empty_n and AB_10_t_empty_n);
    ap_channel_done_AB <= ((ap_sync_reg_channel_write_AB xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_1 <= ((ap_sync_reg_channel_write_AB_1 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_10 <= ((ap_sync_reg_channel_write_AB_10 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_11 <= ((ap_sync_reg_channel_write_AB_11 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_12 <= ((ap_sync_reg_channel_write_AB_12 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_13 <= ((ap_sync_reg_channel_write_AB_13 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_14 <= ((ap_sync_reg_channel_write_AB_14 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_15 <= ((ap_sync_reg_channel_write_AB_15 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_2 <= ((ap_sync_reg_channel_write_AB_2 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_3 <= ((ap_sync_reg_channel_write_AB_3 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_4 <= ((ap_sync_reg_channel_write_AB_4 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_5 <= ((ap_sync_reg_channel_write_AB_5 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_6 <= ((ap_sync_reg_channel_write_AB_6 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_7 <= ((ap_sync_reg_channel_write_AB_7 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_8 <= ((ap_sync_reg_channel_write_AB_8 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_channel_done_AB_9 <= ((ap_sync_reg_channel_write_AB_9 xor ap_const_logic_1) and Loop_1_proc1_U0_ap_done);
    ap_done <= Loop_writeoutput_proc_U0_ap_done;
    ap_idle <= ((ap_const_logic_1 xor AB_15_t_empty_n) and (ap_const_logic_1 xor AB_14_t_empty_n) and (ap_const_logic_1 xor AB_13_t_empty_n) and (ap_const_logic_1 xor AB_12_t_empty_n) and (ap_const_logic_1 xor AB_11_t_empty_n) and (ap_const_logic_1 xor AB_10_t_empty_n) and (ap_const_logic_1 xor AB_9_t_empty_n) and (ap_const_logic_1 xor AB_8_t_empty_n) and (ap_const_logic_1 xor AB_7_t_empty_n) and (ap_const_logic_1 xor AB_6_t_empty_n) and (ap_const_logic_1 xor AB_5_t_empty_n) and (ap_const_logic_1 xor AB_4_t_empty_n) and (ap_const_logic_1 xor AB_3_t_empty_n) and (ap_const_logic_1 xor AB_2_t_empty_n) and (ap_const_logic_1 xor AB_1_t_empty_n) and (ap_const_logic_1 xor AB_t_empty_n) and Loop_writeoutput_proc_U0_ap_idle and Loop_1_proc1_U0_ap_idle);
    ap_ready <= Loop_1_proc1_U0_ap_ready;
    ap_sync_channel_write_AB <= ((ap_channel_done_AB and Loop_1_proc1_U0_AB_full_n) or ap_sync_reg_channel_write_AB);
    ap_sync_channel_write_AB_1 <= ((ap_channel_done_AB_1 and Loop_1_proc1_U0_AB_1_full_n) or ap_sync_reg_channel_write_AB_1);
    ap_sync_channel_write_AB_10 <= ((ap_channel_done_AB_10 and Loop_1_proc1_U0_AB_10_full_n) or ap_sync_reg_channel_write_AB_10);
    ap_sync_channel_write_AB_11 <= ((ap_channel_done_AB_11 and Loop_1_proc1_U0_AB_11_full_n) or ap_sync_reg_channel_write_AB_11);
    ap_sync_channel_write_AB_12 <= ((ap_channel_done_AB_12 and Loop_1_proc1_U0_AB_12_full_n) or ap_sync_reg_channel_write_AB_12);
    ap_sync_channel_write_AB_13 <= ((ap_channel_done_AB_13 and Loop_1_proc1_U0_AB_13_full_n) or ap_sync_reg_channel_write_AB_13);
    ap_sync_channel_write_AB_14 <= ((ap_channel_done_AB_14 and Loop_1_proc1_U0_AB_14_full_n) or ap_sync_reg_channel_write_AB_14);
    ap_sync_channel_write_AB_15 <= ((ap_channel_done_AB_15 and Loop_1_proc1_U0_AB_15_full_n) or ap_sync_reg_channel_write_AB_15);
    ap_sync_channel_write_AB_2 <= ((ap_channel_done_AB_2 and Loop_1_proc1_U0_AB_2_full_n) or ap_sync_reg_channel_write_AB_2);
    ap_sync_channel_write_AB_3 <= ((ap_channel_done_AB_3 and Loop_1_proc1_U0_AB_3_full_n) or ap_sync_reg_channel_write_AB_3);
    ap_sync_channel_write_AB_4 <= ((ap_channel_done_AB_4 and Loop_1_proc1_U0_AB_4_full_n) or ap_sync_reg_channel_write_AB_4);
    ap_sync_channel_write_AB_5 <= ((ap_channel_done_AB_5 and Loop_1_proc1_U0_AB_5_full_n) or ap_sync_reg_channel_write_AB_5);
    ap_sync_channel_write_AB_6 <= ((ap_channel_done_AB_6 and Loop_1_proc1_U0_AB_6_full_n) or ap_sync_reg_channel_write_AB_6);
    ap_sync_channel_write_AB_7 <= ((ap_channel_done_AB_7 and Loop_1_proc1_U0_AB_7_full_n) or ap_sync_reg_channel_write_AB_7);
    ap_sync_channel_write_AB_8 <= ((ap_channel_done_AB_8 and Loop_1_proc1_U0_AB_8_full_n) or ap_sync_reg_channel_write_AB_8);
    ap_sync_channel_write_AB_9 <= ((ap_channel_done_AB_9 and Loop_1_proc1_U0_AB_9_full_n) or ap_sync_reg_channel_write_AB_9);
end behav;
