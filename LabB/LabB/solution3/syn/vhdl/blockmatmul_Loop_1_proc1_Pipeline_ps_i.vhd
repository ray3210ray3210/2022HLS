-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blockmatmul_Loop_1_proc1_Pipeline_ps_i is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln23 : IN STD_LOGIC_VECTOR (5 downto 0);
    AB_15_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_15_ce0 : OUT STD_LOGIC;
    AB_15_we0 : OUT STD_LOGIC;
    AB_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_15_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_15_ce1 : OUT STD_LOGIC;
    AB_15_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_14_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_14_ce0 : OUT STD_LOGIC;
    AB_14_we0 : OUT STD_LOGIC;
    AB_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_14_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_14_ce1 : OUT STD_LOGIC;
    AB_14_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_13_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_13_ce0 : OUT STD_LOGIC;
    AB_13_we0 : OUT STD_LOGIC;
    AB_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_13_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_13_ce1 : OUT STD_LOGIC;
    AB_13_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_12_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_12_ce0 : OUT STD_LOGIC;
    AB_12_we0 : OUT STD_LOGIC;
    AB_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_12_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_12_ce1 : OUT STD_LOGIC;
    AB_12_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_11_ce0 : OUT STD_LOGIC;
    AB_11_we0 : OUT STD_LOGIC;
    AB_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_11_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_11_ce1 : OUT STD_LOGIC;
    AB_11_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_10_ce0 : OUT STD_LOGIC;
    AB_10_we0 : OUT STD_LOGIC;
    AB_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_10_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_10_ce1 : OUT STD_LOGIC;
    AB_10_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_9_ce0 : OUT STD_LOGIC;
    AB_9_we0 : OUT STD_LOGIC;
    AB_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_9_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_9_ce1 : OUT STD_LOGIC;
    AB_9_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_8_ce0 : OUT STD_LOGIC;
    AB_8_we0 : OUT STD_LOGIC;
    AB_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_8_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_8_ce1 : OUT STD_LOGIC;
    AB_8_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_7_ce0 : OUT STD_LOGIC;
    AB_7_we0 : OUT STD_LOGIC;
    AB_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_7_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_7_ce1 : OUT STD_LOGIC;
    AB_7_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_6_ce0 : OUT STD_LOGIC;
    AB_6_we0 : OUT STD_LOGIC;
    AB_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_6_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_6_ce1 : OUT STD_LOGIC;
    AB_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_5_ce0 : OUT STD_LOGIC;
    AB_5_we0 : OUT STD_LOGIC;
    AB_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_5_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_5_ce1 : OUT STD_LOGIC;
    AB_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_4_ce0 : OUT STD_LOGIC;
    AB_4_we0 : OUT STD_LOGIC;
    AB_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_4_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_4_ce1 : OUT STD_LOGIC;
    AB_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_3_ce0 : OUT STD_LOGIC;
    AB_3_we0 : OUT STD_LOGIC;
    AB_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_3_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_3_ce1 : OUT STD_LOGIC;
    AB_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_2_ce0 : OUT STD_LOGIC;
    AB_2_we0 : OUT STD_LOGIC;
    AB_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_2_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_2_ce1 : OUT STD_LOGIC;
    AB_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_1_ce0 : OUT STD_LOGIC;
    AB_1_we0 : OUT STD_LOGIC;
    AB_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_1_ce1 : OUT STD_LOGIC;
    AB_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    AB_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_ce0 : OUT STD_LOGIC;
    AB_we0 : OUT STD_LOGIC;
    AB_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    AB_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AB_ce1 : OUT STD_LOGIC;
    AB_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tempB_a : IN STD_LOGIC_VECTOR (31 downto 0);
    tempB_a_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_16 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_17 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_18 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_19 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_20 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_21 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_22 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_23 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_24 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_25 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln145_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln145_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of blockmatmul_Loop_1_proc1_Pipeline_ps_i is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln26_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_reg_797 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_797_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_797_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal A_load_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_addr_reg_831 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_531_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_1_addr_reg_842 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_535_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_1_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_2_addr_reg_853 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_2_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_3_addr_reg_864 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_3_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_4_addr_reg_875 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_4_reg_881 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_5_addr_reg_886 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_551_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_5_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_6_addr_reg_897 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_555_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_6_reg_903 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_7_addr_reg_908 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_7_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_8_addr_reg_919 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_8_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_9_addr_reg_930 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_9_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_10_addr_reg_941 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_10_reg_947 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_11_addr_reg_952 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_11_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_12_addr_reg_963 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_12_reg_969 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_13_addr_reg_974 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_13_reg_980 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_14_addr_reg_985 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_14_reg_991 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_15_addr_reg_996 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_15_reg_1002 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln26_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_98 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_507_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln26_fu_497_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_513_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component blockmatmul_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blockmatmul_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_2_1_U19 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tempB_a,
        ce => ap_const_logic_1,
        dout => grp_fu_531_p2);

    mul_32s_32s_32_2_1_U20 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tempB_a_1,
        ce => ap_const_logic_1,
        dout => grp_fu_535_p2);

    mul_32s_32s_32_2_1_U21 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tmp_14,
        ce => ap_const_logic_1,
        dout => grp_fu_539_p2);

    mul_32s_32s_32_2_1_U22 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tmp_15,
        ce => ap_const_logic_1,
        dout => grp_fu_543_p2);

    mul_32s_32s_32_2_1_U23 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tmp_16,
        ce => ap_const_logic_1,
        dout => grp_fu_547_p2);

    mul_32s_32s_32_2_1_U24 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tmp_17,
        ce => ap_const_logic_1,
        dout => grp_fu_551_p2);

    mul_32s_32s_32_2_1_U25 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tmp_18,
        ce => ap_const_logic_1,
        dout => grp_fu_555_p2);

    mul_32s_32s_32_2_1_U26 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tmp_19,
        ce => ap_const_logic_1,
        dout => grp_fu_559_p2);

    mul_32s_32s_32_2_1_U27 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tmp_20,
        ce => ap_const_logic_1,
        dout => grp_fu_563_p2);

    mul_32s_32s_32_2_1_U28 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tmp_21,
        ce => ap_const_logic_1,
        dout => grp_fu_567_p2);

    mul_32s_32s_32_2_1_U29 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tmp_22,
        ce => ap_const_logic_1,
        dout => grp_fu_571_p2);

    mul_32s_32s_32_2_1_U30 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tmp_23,
        ce => ap_const_logic_1,
        dout => grp_fu_575_p2);

    mul_32s_32s_32_2_1_U31 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tmp_24,
        ce => ap_const_logic_1,
        dout => grp_fu_579_p2);

    mul_32s_32s_32_2_1_U32 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => tmp_25,
        ce => ap_const_logic_1,
        dout => grp_fu_583_p2);

    mul_32s_32s_32_2_1_U33 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => trunc_ln145_2,
        ce => ap_const_logic_1,
        dout => grp_fu_587_p2);

    mul_32s_32s_32_2_1_U34 : component blockmatmul_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_811,
        din1 => trunc_ln145_3,
        ce => ap_const_logic_1,
        dout => grp_fu_591_p2);

    flow_control_loop_pipe_sequential_init_U : component blockmatmul_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln26_fu_501_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_98 <= add_ln26_fu_507_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_98 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                AB_10_addr_reg_941 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_11_addr_reg_952 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_12_addr_reg_963 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_13_addr_reg_974 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_14_addr_reg_985 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_15_addr_reg_996 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_1_addr_reg_842 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_2_addr_reg_853 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_3_addr_reg_864 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_4_addr_reg_875 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_5_addr_reg_886 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_6_addr_reg_897 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_7_addr_reg_908 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_8_addr_reg_919 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_9_addr_reg_930 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                AB_addr_reg_831 <= zext_ln26_fu_595_p1(4 - 1 downto 0);
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                i_1_reg_797_pp0_iter2_reg <= i_1_reg_797_pp0_iter1_reg;
                mul_ln28_10_reg_947 <= grp_fu_571_p2;
                mul_ln28_11_reg_958 <= grp_fu_575_p2;
                mul_ln28_12_reg_969 <= grp_fu_579_p2;
                mul_ln28_13_reg_980 <= grp_fu_583_p2;
                mul_ln28_14_reg_991 <= grp_fu_587_p2;
                mul_ln28_15_reg_1002 <= grp_fu_591_p2;
                mul_ln28_1_reg_848 <= grp_fu_535_p2;
                mul_ln28_2_reg_859 <= grp_fu_539_p2;
                mul_ln28_3_reg_870 <= grp_fu_543_p2;
                mul_ln28_4_reg_881 <= grp_fu_547_p2;
                mul_ln28_5_reg_892 <= grp_fu_551_p2;
                mul_ln28_6_reg_903 <= grp_fu_555_p2;
                mul_ln28_7_reg_914 <= grp_fu_559_p2;
                mul_ln28_8_reg_925 <= grp_fu_563_p2;
                mul_ln28_9_reg_936 <= grp_fu_567_p2;
                mul_ln28_reg_837 <= grp_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                A_load_reg_811 <= A_q0;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_1_reg_797 <= ap_sig_allocacmp_i_1;
                i_1_reg_797_pp0_iter1_reg <= i_1_reg_797;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    AB_10_address0 <= AB_10_addr_reg_941;
    AB_10_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_10_ce0 <= ap_const_logic_1;
        else 
            AB_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_10_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_10_ce1 <= ap_const_logic_1;
        else 
            AB_10_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_10_d0 <= std_logic_vector(unsigned(AB_10_q1) + unsigned(mul_ln28_10_reg_947));

    AB_10_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_10_we0 <= ap_const_logic_1;
        else 
            AB_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_11_address0 <= AB_11_addr_reg_952;
    AB_11_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_11_ce0 <= ap_const_logic_1;
        else 
            AB_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_11_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_11_ce1 <= ap_const_logic_1;
        else 
            AB_11_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_11_d0 <= std_logic_vector(unsigned(AB_11_q1) + unsigned(mul_ln28_11_reg_958));

    AB_11_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_11_we0 <= ap_const_logic_1;
        else 
            AB_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_12_address0 <= AB_12_addr_reg_963;
    AB_12_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_12_ce0 <= ap_const_logic_1;
        else 
            AB_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_12_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_12_ce1 <= ap_const_logic_1;
        else 
            AB_12_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_12_d0 <= std_logic_vector(unsigned(AB_12_q1) + unsigned(mul_ln28_12_reg_969));

    AB_12_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_12_we0 <= ap_const_logic_1;
        else 
            AB_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_13_address0 <= AB_13_addr_reg_974;
    AB_13_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_13_ce0 <= ap_const_logic_1;
        else 
            AB_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_13_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_13_ce1 <= ap_const_logic_1;
        else 
            AB_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_13_d0 <= std_logic_vector(unsigned(AB_13_q1) + unsigned(mul_ln28_13_reg_980));

    AB_13_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_13_we0 <= ap_const_logic_1;
        else 
            AB_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_14_address0 <= AB_14_addr_reg_985;
    AB_14_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_14_ce0 <= ap_const_logic_1;
        else 
            AB_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_14_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_14_ce1 <= ap_const_logic_1;
        else 
            AB_14_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_14_d0 <= std_logic_vector(unsigned(AB_14_q1) + unsigned(mul_ln28_14_reg_991));

    AB_14_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_14_we0 <= ap_const_logic_1;
        else 
            AB_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_15_address0 <= AB_15_addr_reg_996;
    AB_15_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_15_ce0 <= ap_const_logic_1;
        else 
            AB_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_15_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_15_ce1 <= ap_const_logic_1;
        else 
            AB_15_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_15_d0 <= std_logic_vector(unsigned(AB_15_q1) + unsigned(mul_ln28_15_reg_1002));

    AB_15_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_15_we0 <= ap_const_logic_1;
        else 
            AB_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_1_address0 <= AB_1_addr_reg_842;
    AB_1_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_1_ce0 <= ap_const_logic_1;
        else 
            AB_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_1_ce1 <= ap_const_logic_1;
        else 
            AB_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_1_d0 <= std_logic_vector(unsigned(AB_1_q1) + unsigned(mul_ln28_1_reg_848));

    AB_1_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_1_we0 <= ap_const_logic_1;
        else 
            AB_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_2_address0 <= AB_2_addr_reg_853;
    AB_2_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_2_ce0 <= ap_const_logic_1;
        else 
            AB_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_2_ce1 <= ap_const_logic_1;
        else 
            AB_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_2_d0 <= std_logic_vector(unsigned(AB_2_q1) + unsigned(mul_ln28_2_reg_859));

    AB_2_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_2_we0 <= ap_const_logic_1;
        else 
            AB_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_3_address0 <= AB_3_addr_reg_864;
    AB_3_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_3_ce0 <= ap_const_logic_1;
        else 
            AB_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_3_ce1 <= ap_const_logic_1;
        else 
            AB_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_3_d0 <= std_logic_vector(unsigned(AB_3_q1) + unsigned(mul_ln28_3_reg_870));

    AB_3_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_3_we0 <= ap_const_logic_1;
        else 
            AB_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_4_address0 <= AB_4_addr_reg_875;
    AB_4_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_4_ce0 <= ap_const_logic_1;
        else 
            AB_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_4_ce1 <= ap_const_logic_1;
        else 
            AB_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_4_d0 <= std_logic_vector(unsigned(AB_4_q1) + unsigned(mul_ln28_4_reg_881));

    AB_4_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_4_we0 <= ap_const_logic_1;
        else 
            AB_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_5_address0 <= AB_5_addr_reg_886;
    AB_5_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_5_ce0 <= ap_const_logic_1;
        else 
            AB_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_5_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_5_ce1 <= ap_const_logic_1;
        else 
            AB_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_5_d0 <= std_logic_vector(unsigned(AB_5_q1) + unsigned(mul_ln28_5_reg_892));

    AB_5_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_5_we0 <= ap_const_logic_1;
        else 
            AB_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_6_address0 <= AB_6_addr_reg_897;
    AB_6_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_6_ce0 <= ap_const_logic_1;
        else 
            AB_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_6_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_6_ce1 <= ap_const_logic_1;
        else 
            AB_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_6_d0 <= std_logic_vector(unsigned(AB_6_q1) + unsigned(mul_ln28_6_reg_903));

    AB_6_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_6_we0 <= ap_const_logic_1;
        else 
            AB_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_7_address0 <= AB_7_addr_reg_908;
    AB_7_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_7_ce0 <= ap_const_logic_1;
        else 
            AB_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_7_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_7_ce1 <= ap_const_logic_1;
        else 
            AB_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_7_d0 <= std_logic_vector(unsigned(AB_7_q1) + unsigned(mul_ln28_7_reg_914));

    AB_7_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_7_we0 <= ap_const_logic_1;
        else 
            AB_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_8_address0 <= AB_8_addr_reg_919;
    AB_8_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_8_ce0 <= ap_const_logic_1;
        else 
            AB_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_8_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_8_ce1 <= ap_const_logic_1;
        else 
            AB_8_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_8_d0 <= std_logic_vector(unsigned(AB_8_q1) + unsigned(mul_ln28_8_reg_925));

    AB_8_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_8_we0 <= ap_const_logic_1;
        else 
            AB_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_9_address0 <= AB_9_addr_reg_930;
    AB_9_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_9_ce0 <= ap_const_logic_1;
        else 
            AB_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_9_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_9_ce1 <= ap_const_logic_1;
        else 
            AB_9_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_9_d0 <= std_logic_vector(unsigned(AB_9_q1) + unsigned(mul_ln28_9_reg_936));

    AB_9_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_9_we0 <= ap_const_logic_1;
        else 
            AB_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_address0 <= AB_addr_reg_831;
    AB_address1 <= zext_ln26_fu_595_p1(4 - 1 downto 0);

    AB_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_ce0 <= ap_const_logic_1;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            AB_ce1 <= ap_const_logic_1;
        else 
            AB_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    AB_d0 <= std_logic_vector(unsigned(AB_q1) + unsigned(mul_ln28_reg_837));

    AB_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            AB_we0 <= ap_const_logic_1;
        else 
            AB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_address0 <= p_cast_fu_521_p1(10 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln26_fu_507_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln26_fu_501_p2)
    begin
        if (((icmp_ln26_fu_501_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_98, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_98;
        end if; 
    end process;

    icmp_ln26_fu_501_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv5_10) else "0";
    p_cast_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_513_p3),64));
    tmp_fu_513_p3 <= (trunc_ln26_fu_497_p1 & zext_ln23);
    trunc_ln26_fu_497_p1 <= ap_sig_allocacmp_i_1(4 - 1 downto 0);
    zext_ln26_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_797_pp0_iter2_reg),64));
end behav;
